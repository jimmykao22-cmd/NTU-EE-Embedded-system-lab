
lab-1-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005e74  08005e74  00006e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc0  08005fc0  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005fc0  08005fc0  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005fc0  08005fc0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc0  08005fc0  00006fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fc4  08005fc4  00006fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005fc8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001950  20000010  08005fd8  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001960  08005fd8  00007960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecae  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002697  00000000  00000000  00015cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00018388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a64  00000000  00000000  00019150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000311f  00000000  00000000  00019bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e33d  00000000  00000000  0001ccd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec2f6  00000000  00000000  0002b010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117306  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003790  00000000  00000000  0011734c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011aadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e5c 	.word	0x08005e5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005e5c 	.word	0x08005e5c

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fc91 	bl	8000afa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f868 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8b8 	bl	8000350 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* Init scheduler */
  osKernelInitialize();
 80001e0:	f001 fe7e 	bl	8001ee0 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  /* Create mutex */
  ledMutexHandle = osMutexNew(&ledMutex_attributes);
 80001e4:	4820      	ldr	r0, [pc, #128]	@ (8000268 <main+0x98>)
 80001e6:	f002 f847 	bl	8002278 <osMutexNew>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a1f      	ldr	r2, [pc, #124]	@ (800026c <main+0x9c>)
 80001ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* Create semaphores */

  semButtonHandle = osSemaphoreNew(1, 0, &semButton_attributes);
 80001f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000270 <main+0xa0>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	2001      	movs	r0, #1
 80001f6:	f002 f94d 	bl	8002494 <osSemaphoreNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000274 <main+0xa4>)
 80001fe:	6013      	str	r3, [r2, #0]
  semTimerHandle  = osSemaphoreNew(1, 0, &semTimer_attributes);
 8000200:	4a1d      	ldr	r2, [pc, #116]	@ (8000278 <main+0xa8>)
 8000202:	2100      	movs	r1, #0
 8000204:	2001      	movs	r0, #1
 8000206:	f002 f945 	bl	8002494 <osSemaphoreNew>
 800020a:	4603      	mov	r3, r0
 800020c:	4a1b      	ldr	r2, [pc, #108]	@ (800027c <main+0xac>)
 800020e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  buttonQueueHandle = osMessageQueueNew(10, sizeof(ButtonEvent_t), &buttonQueue_attributes);
 8000210:	4a1b      	ldr	r2, [pc, #108]	@ (8000280 <main+0xb0>)
 8000212:	2101      	movs	r1, #1
 8000214:	200a      	movs	r0, #10
 8000216:	f002 fa5d 	bl	80026d4 <osMessageQueueNew>
 800021a:	4603      	mov	r3, r0
 800021c:	4a19      	ldr	r2, [pc, #100]	@ (8000284 <main+0xb4>)
 800021e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(Task1, NULL, &defaultTask_attributes);
 8000220:	4a19      	ldr	r2, [pc, #100]	@ (8000288 <main+0xb8>)
 8000222:	2100      	movs	r1, #0
 8000224:	4819      	ldr	r0, [pc, #100]	@ (800028c <main+0xbc>)
 8000226:	f001 feba 	bl	8001f9e <osThreadNew>
 800022a:	4603      	mov	r3, r0
 800022c:	4a18      	ldr	r2, [pc, #96]	@ (8000290 <main+0xc0>)
 800022e:	6013      	str	r3, [r2, #0]
  myTask02Handle = osThreadNew(Task2,NULL,&myTask02_attributes);
 8000230:	4a18      	ldr	r2, [pc, #96]	@ (8000294 <main+0xc4>)
 8000232:	2100      	movs	r1, #0
 8000234:	4818      	ldr	r0, [pc, #96]	@ (8000298 <main+0xc8>)
 8000236:	f001 feb2 	bl	8001f9e <osThreadNew>
 800023a:	4603      	mov	r3, r0
 800023c:	4a17      	ldr	r2, [pc, #92]	@ (800029c <main+0xcc>)
 800023e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  ledTimerHandle = osTimerNew(TimerCallback, osTimerPeriodic, NULL, &ledTimer_attributes);
 8000240:	4b17      	ldr	r3, [pc, #92]	@ (80002a0 <main+0xd0>)
 8000242:	2200      	movs	r2, #0
 8000244:	2101      	movs	r1, #1
 8000246:	4817      	ldr	r0, [pc, #92]	@ (80002a4 <main+0xd4>)
 8000248:	f001 ff6c 	bl	8002124 <osTimerNew>
 800024c:	4603      	mov	r3, r0
 800024e:	4a16      	ldr	r2, [pc, #88]	@ (80002a8 <main+0xd8>)
 8000250:	6013      	str	r3, [r2, #0]
  osTimerStart(ledTimerHandle, 10000);
 8000252:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <main+0xd8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f242 7110 	movw	r1, #10000	@ 0x2710
 800025a:	4618      	mov	r0, r3
 800025c:	f001 ffde 	bl	800221c <osTimerStart>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000260:	f001 fe62 	bl	8001f28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000264:	bf00      	nop
 8000266:	e7fd      	b.n	8000264 <main+0x94>
 8000268:	08005f28 	.word	0x08005f28
 800026c:	2000003c 	.word	0x2000003c
 8000270:	08005f38 	.word	0x08005f38
 8000274:	20000034 	.word	0x20000034
 8000278:	08005f48 	.word	0x08005f48
 800027c:	20000038 	.word	0x20000038
 8000280:	08005f68 	.word	0x08005f68
 8000284:	20000044 	.word	0x20000044
 8000288:	08005ee0 	.word	0x08005ee0
 800028c:	08000845 	.word	0x08000845
 8000290:	2000002c 	.word	0x2000002c
 8000294:	08005f04 	.word	0x08005f04
 8000298:	080008f9 	.word	0x080008f9
 800029c:	20000030 	.word	0x20000030
 80002a0:	08005f58 	.word	0x08005f58
 80002a4:	08000965 	.word	0x08000965
 80002a8:	20000040 	.word	0x20000040

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b096      	sub	sp, #88	@ 0x58
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	2244      	movs	r2, #68	@ 0x44
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f005 fd94 	bl	8005de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002d2:	f000 ffb3 	bl	800123c <HAL_PWREx_ControlVoltageScaling>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002dc:	f000 fb52 	bl	8000984 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002e0:	2310      	movs	r3, #16
 80002e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e4:	2301      	movs	r3, #1
 80002e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ec:	2360      	movs	r3, #96	@ 0x60
 80002ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	2302      	movs	r3, #2
 80002f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002f4:	2301      	movs	r3, #1
 80002f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002f8:	2301      	movs	r3, #1
 80002fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002fc:	2328      	movs	r3, #40	@ 0x28
 80002fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000300:	2307      	movs	r3, #7
 8000302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000304:	2302      	movs	r3, #2
 8000306:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000308:	2302      	movs	r3, #2
 800030a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	4618      	mov	r0, r3
 8000312:	f000 ffe9 	bl	80012e8 <HAL_RCC_OscConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800031c:	f000 fb32 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000320:	230f      	movs	r3, #15
 8000322:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000324:	2303      	movs	r3, #3
 8000326:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000334:	463b      	mov	r3, r7
 8000336:	2104      	movs	r1, #4
 8000338:	4618      	mov	r0, r3
 800033a:	f001 fbb1 	bl	8001aa0 <HAL_RCC_ClockConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000344:	f000 fb1e 	bl	8000984 <Error_Handler>
  }
}
 8000348:	bf00      	nop
 800034a:	3758      	adds	r7, #88	@ 0x58
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08a      	sub	sp, #40	@ 0x28
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000366:	4bbc      	ldr	r3, [pc, #752]	@ (8000658 <MX_GPIO_Init+0x308>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800036a:	4abb      	ldr	r2, [pc, #748]	@ (8000658 <MX_GPIO_Init+0x308>)
 800036c:	f043 0310 	orr.w	r3, r3, #16
 8000370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000372:	4bb9      	ldr	r3, [pc, #740]	@ (8000658 <MX_GPIO_Init+0x308>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000376:	f003 0310 	and.w	r3, r3, #16
 800037a:	613b      	str	r3, [r7, #16]
 800037c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037e:	4bb6      	ldr	r3, [pc, #728]	@ (8000658 <MX_GPIO_Init+0x308>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000382:	4ab5      	ldr	r2, [pc, #724]	@ (8000658 <MX_GPIO_Init+0x308>)
 8000384:	f043 0304 	orr.w	r3, r3, #4
 8000388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800038a:	4bb3      	ldr	r3, [pc, #716]	@ (8000658 <MX_GPIO_Init+0x308>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038e:	f003 0304 	and.w	r3, r3, #4
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	4bb0      	ldr	r3, [pc, #704]	@ (8000658 <MX_GPIO_Init+0x308>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039a:	4aaf      	ldr	r2, [pc, #700]	@ (8000658 <MX_GPIO_Init+0x308>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003a2:	4bad      	ldr	r3, [pc, #692]	@ (8000658 <MX_GPIO_Init+0x308>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ae:	4baa      	ldr	r3, [pc, #680]	@ (8000658 <MX_GPIO_Init+0x308>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b2:	4aa9      	ldr	r2, [pc, #676]	@ (8000658 <MX_GPIO_Init+0x308>)
 80003b4:	f043 0302 	orr.w	r3, r3, #2
 80003b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ba:	4ba7      	ldr	r3, [pc, #668]	@ (8000658 <MX_GPIO_Init+0x308>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003be:	f003 0302 	and.w	r3, r3, #2
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c6:	4ba4      	ldr	r3, [pc, #656]	@ (8000658 <MX_GPIO_Init+0x308>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ca:	4aa3      	ldr	r2, [pc, #652]	@ (8000658 <MX_GPIO_Init+0x308>)
 80003cc:	f043 0308 	orr.w	r3, r3, #8
 80003d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003d2:	4ba1      	ldr	r3, [pc, #644]	@ (8000658 <MX_GPIO_Init+0x308>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d6:	f003 0308 	and.w	r3, r3, #8
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80003e4:	489d      	ldr	r0, [pc, #628]	@ (800065c <MX_GPIO_Init+0x30c>)
 80003e6:	f000 fed1 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f248 1104 	movw	r1, #33028	@ 0x8104
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f4:	f000 feca 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80003f8:	2200      	movs	r2, #0
 80003fa:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80003fe:	4898      	ldr	r0, [pc, #608]	@ (8000660 <MX_GPIO_Init+0x310>)
 8000400:	f000 fec4 	bl	800118c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f241 0181 	movw	r1, #4225	@ 0x1081
 800040a:	4896      	ldr	r0, [pc, #600]	@ (8000664 <MX_GPIO_Init+0x314>)
 800040c:	f000 febe 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000416:	4893      	ldr	r0, [pc, #588]	@ (8000664 <MX_GPIO_Init+0x314>)
 8000418:	f000 feb8 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000422:	4891      	ldr	r0, [pc, #580]	@ (8000668 <MX_GPIO_Init+0x318>)
 8000424:	f000 feb2 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	2120      	movs	r1, #32
 800042c:	488c      	ldr	r0, [pc, #560]	@ (8000660 <MX_GPIO_Init+0x310>)
 800042e:	f000 fead 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2101      	movs	r1, #1
 8000436:	4889      	ldr	r0, [pc, #548]	@ (800065c <MX_GPIO_Init+0x30c>)
 8000438:	f000 fea8 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800043c:	f240 1315 	movw	r3, #277	@ 0x115
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	2301      	movs	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2300      	movs	r3, #0
 800044c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	4881      	ldr	r0, [pc, #516]	@ (800065c <MX_GPIO_Init+0x30c>)
 8000456:	f000 fcd7 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800045a:	236a      	movs	r3, #106	@ 0x6a
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800045e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	487b      	ldr	r0, [pc, #492]	@ (800065c <MX_GPIO_Init+0x30c>)
 8000470:	f000 fcca 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000474:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800047a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	4619      	mov	r1, r3
 800048a:	4877      	ldr	r0, [pc, #476]	@ (8000668 <MX_GPIO_Init+0x318>)
 800048c:	f000 fcbc 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000490:	233f      	movs	r3, #63	@ 0x3f
 8000492:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000494:	230b      	movs	r3, #11
 8000496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	4619      	mov	r1, r3
 80004a2:	4871      	ldr	r0, [pc, #452]	@ (8000668 <MX_GPIO_Init+0x318>)
 80004a4:	f000 fcb0 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80004a8:	2303      	movs	r3, #3
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004b4:	2303      	movs	r3, #3
 80004b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80004b8:	2308      	movs	r3, #8
 80004ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	4619      	mov	r1, r3
 80004c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c6:	f000 fc9f 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80004ca:	f248 1304 	movw	r3, #33028	@ 0x8104
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2300      	movs	r3, #0
 80004da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4619      	mov	r1, r3
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e6:	f000 fc8f 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80004ea:	2308      	movs	r3, #8
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ee:	2302      	movs	r3, #2
 80004f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	2300      	movs	r3, #0
 80004f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80004fa:	2301      	movs	r3, #1
 80004fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	4619      	mov	r1, r3
 8000504:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000508:	f000 fc7e 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800050c:	2310      	movs	r3, #16
 800050e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000510:	230b      	movs	r3, #11
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4619      	mov	r1, r3
 800051e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000522:	f000 fc71 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000526:	23e0      	movs	r3, #224	@ 0xe0
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052a:	2302      	movs	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000532:	2303      	movs	r3, #3
 8000534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000536:	2305      	movs	r3, #5
 8000538:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4619      	mov	r1, r3
 8000540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000544:	f000 fc60 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800054c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4619      	mov	r1, r3
 800055c:	4840      	ldr	r0, [pc, #256]	@ (8000660 <MX_GPIO_Init+0x310>)
 800055e:	f000 fc53 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000562:	2302      	movs	r3, #2
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000566:	230b      	movs	r3, #11
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	483a      	ldr	r0, [pc, #232]	@ (8000660 <MX_GPIO_Init+0x310>)
 8000576:	f000 fc47 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800057a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 800057e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4833      	ldr	r0, [pc, #204]	@ (8000660 <MX_GPIO_Init+0x310>)
 8000594:	f000 fc38 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000598:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059e:	2302      	movs	r3, #2
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2300      	movs	r3, #0
 80005a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80005aa:	2306      	movs	r3, #6
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	4829      	ldr	r0, [pc, #164]	@ (800065c <MX_GPIO_Init+0x30c>)
 80005b6:	f000 fc27 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80005ba:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80005be:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c8:	2303      	movs	r3, #3
 80005ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80005cc:	230a      	movs	r3, #10
 80005ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4619      	mov	r1, r3
 80005d6:	4821      	ldr	r0, [pc, #132]	@ (800065c <MX_GPIO_Init+0x30c>)
 80005d8:	f000 fc16 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80005dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e2:	2312      	movs	r3, #18
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80005ee:	2304      	movs	r3, #4
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	4819      	ldr	r0, [pc, #100]	@ (8000660 <MX_GPIO_Init+0x310>)
 80005fa:	f000 fc05 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80005fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000610:	2307      	movs	r3, #7
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	4812      	ldr	r0, [pc, #72]	@ (8000664 <MX_GPIO_Init+0x314>)
 800061c:	f000 fbf4 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000620:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000624:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000626:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	480b      	ldr	r0, [pc, #44]	@ (8000664 <MX_GPIO_Init+0x314>)
 8000638:	f000 fbe6 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800063c:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	e00a      	b.n	800066c <MX_GPIO_Init+0x31c>
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	48001000 	.word	0x48001000
 8000660:	48000400 	.word	0x48000400
 8000664:	48000c00 	.word	0x48000c00
 8000668:	48000800 	.word	0x48000800
 800066c:	4852      	ldr	r0, [pc, #328]	@ (80007b8 <MX_GPIO_Init+0x468>)
 800066e:	f000 fbcb 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000672:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	484c      	ldr	r0, [pc, #304]	@ (80007bc <MX_GPIO_Init+0x46c>)
 800068c:	f000 fbbc 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000690:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000696:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	4845      	ldr	r0, [pc, #276]	@ (80007bc <MX_GPIO_Init+0x46c>)
 80006a8:	f000 fbae 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80006ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c4:	f000 fba0 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80006c8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006da:	230a      	movs	r3, #10
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e8:	f000 fb8e 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80006ec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006fe:	2306      	movs	r3, #6
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	482c      	ldr	r0, [pc, #176]	@ (80007bc <MX_GPIO_Init+0x46c>)
 800070a:	f000 fb7d 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800071e:	2305      	movs	r3, #5
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	4823      	ldr	r0, [pc, #140]	@ (80007b8 <MX_GPIO_Init+0x468>)
 800072a:	f000 fb6d 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800072e:	2378      	movs	r3, #120	@ 0x78
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800073e:	2307      	movs	r3, #7
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	481b      	ldr	r0, [pc, #108]	@ (80007b8 <MX_GPIO_Init+0x468>)
 800074a:	f000 fb5d 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_LINK_UART1_TX_Pin ST_LINK_UART1_RX_Pin */
  GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800074e:	23c0      	movs	r3, #192	@ 0xc0
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800075e:	2307      	movs	r3, #7
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	4815      	ldr	r0, [pc, #84]	@ (80007c0 <MX_GPIO_Init+0x470>)
 800076a:	f000 fb4d 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800076e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000774:	2312      	movs	r3, #18
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000780:	2304      	movs	r3, #4
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <MX_GPIO_Init+0x470>)
 800078c:	f000 fb3c 	bl	8000e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2105      	movs	r1, #5
 8000794:	2017      	movs	r0, #23
 8000796:	f000 fb00 	bl	8000d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800079a:	2017      	movs	r0, #23
 800079c:	f000 fb19 	bl	8000dd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2105      	movs	r1, #5
 80007a4:	2028      	movs	r0, #40	@ 0x28
 80007a6:	f000 faf8 	bl	8000d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007aa:	2028      	movs	r0, #40	@ 0x28
 80007ac:	f000 fb11 	bl	8000dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	@ 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	48000c00 	.word	0x48000c00
 80007bc:	48000800 	.word	0x48000800
 80007c0:	48000400 	.word	0x48000400

080007c4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
uint32_t start_tick = 0;
uint32_t release_tick = 0;
uint32_t duration = 0;
ButtonEvent_t time ;
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_13)
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007d4:	d128      	bne.n	8000828 <HAL_GPIO_EXTI_Callback+0x64>
	{
		if ( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 80007d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007da:	4815      	ldr	r0, [pc, #84]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x6c>)
 80007dc:	f000 fcbe 	bl	800115c <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d105      	bne.n	80007f2 <HAL_GPIO_EXTI_Callback+0x2e>
			start_tick = osKernelGetTickCount();
 80007e6:	f001 fbc5 	bl	8001f74 <osKernelGetTickCount>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a11      	ldr	r2, [pc, #68]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x70>)
 80007ee:	6013      	str	r3, [r2, #0]
			else
				time = short_time;
			osMessageQueuePut(buttonQueueHandle, &time, 0, 0);
		}
	}
}
 80007f0:	e01a      	b.n	8000828 <HAL_GPIO_EXTI_Callback+0x64>
			duration = osKernelGetTickCount() - start_tick;
 80007f2:	f001 fbbf 	bl	8001f74 <osKernelGetTickCount>
 80007f6:	4602      	mov	r2, r0
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x70>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x74>)
 8000800:	6013      	str	r3, [r2, #0]
			if(duration >= 1000)
 8000802:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x74>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800080a:	d303      	bcc.n	8000814 <HAL_GPIO_EXTI_Callback+0x50>
				time = long_time;
 800080c:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <HAL_GPIO_EXTI_Callback+0x78>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	e002      	b.n	800081a <HAL_GPIO_EXTI_Callback+0x56>
				time = short_time;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <HAL_GPIO_EXTI_Callback+0x78>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
			osMessageQueuePut(buttonQueueHandle, &time, 0, 0);
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_GPIO_EXTI_Callback+0x7c>)
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	2300      	movs	r3, #0
 8000820:	2200      	movs	r2, #0
 8000822:	4906      	ldr	r1, [pc, #24]	@ (800083c <HAL_GPIO_EXTI_Callback+0x78>)
 8000824:	f001 ffca 	bl	80027bc <osMessageQueuePut>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	48000800 	.word	0x48000800
 8000834:	20000048 	.word	0x20000048
 8000838:	2000004c 	.word	0x2000004c
 800083c:	20000050 	.word	0x20000050
 8000840:	20000044 	.word	0x20000044

08000844 <Task1>:
  */
/* USER CODE END Header_Task1 */


void Task1(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	for(;;)
	{

			//button_pressed = 0; // 重置狀態
		//	if( osSemaphoreAcquire(semButtonHandle,osWaitForever) == osOK){
			if (osMessageQueueGet( buttonQueueHandle, &time,0, osWaitForever  )== osOK){
 800084c:	4b26      	ldr	r3, [pc, #152]	@ (80008e8 <Task1+0xa4>)
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2200      	movs	r2, #0
 8000856:	4925      	ldr	r1, [pc, #148]	@ (80008ec <Task1+0xa8>)
 8000858:	f002 f810 	bl	800287c <osMessageQueueGet>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f4      	bne.n	800084c <Task1+0x8>
				if (osMutexAcquire(ledMutexHandle, osWaitForever) == osOK){
 8000862:	4b23      	ldr	r3, [pc, #140]	@ (80008f0 <Task1+0xac>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f04f 31ff 	mov.w	r1, #4294967295
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fd8a 	bl	8002384 <osMutexAcquire>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1ea      	bne.n	800084c <Task1+0x8>

						if (time == short_time){
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <Task1+0xa8>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d112      	bne.n	80008a4 <Task1+0x60>
							for(int i=0;i<10;i++){
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	e00b      	b.n	800089c <Task1+0x58>
								HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8000884:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000888:	481a      	ldr	r0, [pc, #104]	@ (80008f4 <Task1+0xb0>)
 800088a:	f000 fc97 	bl	80011bc <HAL_GPIO_TogglePin>
								osDelay(500);
 800088e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000892:	f001 fc16 	bl	80020c2 <osDelay>
							for(int i=0;i<10;i++){
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3301      	adds	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2b09      	cmp	r3, #9
 80008a0:	ddf0      	ble.n	8000884 <Task1+0x40>
 80008a2:	e014      	b.n	80008ce <Task1+0x8a>
							}
						}
						else if(time == long_time ){
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <Task1+0xa8>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d110      	bne.n	80008ce <Task1+0x8a>
							for(int i=0;i<50;i++){
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	e00a      	b.n	80008c8 <Task1+0x84>
								HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 80008b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b6:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <Task1+0xb0>)
 80008b8:	f000 fc80 	bl	80011bc <HAL_GPIO_TogglePin>
								osDelay(100);
 80008bc:	2064      	movs	r0, #100	@ 0x64
 80008be:	f001 fc00 	bl	80020c2 <osDelay>
							for(int i=0;i<50;i++){
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	3301      	adds	r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	2b31      	cmp	r3, #49	@ 0x31
 80008cc:	ddf1      	ble.n	80008b2 <Task1+0x6e>
							}
						}
					HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008d4:	4807      	ldr	r0, [pc, #28]	@ (80008f4 <Task1+0xb0>)
 80008d6:	f000 fc59 	bl	800118c <HAL_GPIO_WritePin>
					osMutexRelease(ledMutexHandle);
 80008da:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <Task1+0xac>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 fd9b 	bl	800241a <osMutexRelease>
			if (osMessageQueueGet( buttonQueueHandle, &time,0, osWaitForever  )== osOK){
 80008e4:	e7b2      	b.n	800084c <Task1+0x8>
 80008e6:	bf00      	nop
 80008e8:	20000044 	.word	0x20000044
 80008ec:	20000050 	.word	0x20000050
 80008f0:	2000003c 	.word	0x2000003c
 80008f4:	48000400 	.word	0x48000400

080008f8 <Task2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2 */
void Task2(void *argument)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2 */
  /* Infinite loop */
	for(;;){
		if( osSemaphoreAcquire(semTimerHandle,osWaitForever) == osOK){
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <Task2+0x60>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f04f 31ff 	mov.w	r1, #4294967295
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fe4d 	bl	80025a8 <osSemaphoreAcquire>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1f5      	bne.n	8000900 <Task2+0x8>
			if (osMutexAcquire(ledMutexHandle, osWaitForever) == osOK){
 8000914:	4b11      	ldr	r3, [pc, #68]	@ (800095c <Task2+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f04f 31ff 	mov.w	r1, #4294967295
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fd31 	bl	8002384 <osMutexAcquire>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1eb      	bne.n	8000900 <Task2+0x8>
				for(int i=0;i<40;i++)
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e00a      	b.n	8000944 <Task2+0x4c>
				{
					HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 800092e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000932:	480b      	ldr	r0, [pc, #44]	@ (8000960 <Task2+0x68>)
 8000934:	f000 fc42 	bl	80011bc <HAL_GPIO_TogglePin>
					osDelay(50); // HAL_Delay(1000);
 8000938:	2032      	movs	r0, #50	@ 0x32
 800093a:	f001 fbc2 	bl	80020c2 <osDelay>
				for(int i=0;i<40;i++)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3301      	adds	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2b27      	cmp	r3, #39	@ 0x27
 8000948:	ddf1      	ble.n	800092e <Task2+0x36>
				}
				osMutexRelease(ledMutexHandle);
 800094a:	4b04      	ldr	r3, [pc, #16]	@ (800095c <Task2+0x64>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f001 fd63 	bl	800241a <osMutexRelease>
		if( osSemaphoreAcquire(semTimerHandle,osWaitForever) == osOK){
 8000954:	e7d4      	b.n	8000900 <Task2+0x8>
 8000956:	bf00      	nop
 8000958:	20000038 	.word	0x20000038
 800095c:	2000003c 	.word	0x2000003c
 8000960:	48000400 	.word	0x48000400

08000964 <TimerCallback>:

	}
  /* USER CODE END Task2 */
}
void TimerCallback(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    osSemaphoreRelease(semTimerHandle); // 通知 Task_2
 800096c:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <TimerCallback+0x1c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fe6b 	bl	800264c <osSemaphoreRelease>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000038 	.word	0x20000038

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <HAL_MspInit+0x4c>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099a:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <HAL_MspInit+0x4c>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <HAL_MspInit+0x4c>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <HAL_MspInit+0x4c>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	f06f 0001 	mvn.w	r0, #1
 80009ce:	f000 f9e4 	bl	8000d9a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <NMI_Handler+0x4>

080009e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <MemManage_Handler+0x4>

080009f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 f8c3 	bl	8000ba4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a1e:	f003 ffa3 	bl	8004968 <xTaskGetSchedulerState>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d001      	beq.n	8000a2c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a28:	f004 ff5e 	bl	80058e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000a34:	2020      	movs	r0, #32
 8000a36:	f000 fbdb 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000a3a:	2040      	movs	r0, #64	@ 0x40
 8000a3c:	f000 fbd8 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000a40:	2080      	movs	r0, #128	@ 0x80
 8000a42:	f000 fbd5 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000a46:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000a4a:	f000 fbd1 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000a56:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000a5a:	f000 fbc9 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000a5e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000a62:	f000 fbc5 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000a66:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a6a:	f000 fbc1 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000a6e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a72:	f000 fbbd 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000a76:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000a7a:	f000 fbb9 	bl	80011f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aac:	f7ff ffea 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	@ (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f005 f98f 	bl	8005df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ada:	f7ff fb79 	bl	80001d0 <main>

08000ade <LoopForever>:

LoopForever:
    b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aec:	08005fc8 	.word	0x08005fc8
  ldr r2, =_sbss
 8000af0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000af4:	20001960 	.word	0x20001960

08000af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_2_IRQHandler>

08000afa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f93d 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f80e 	bl	8000b2c <HAL_InitTick>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d002      	beq.n	8000b1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	71fb      	strb	r3, [r7, #7]
 8000b1a:	e001      	b.n	8000b20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b1c:	f7ff ff38 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b20:	79fb      	ldrb	r3, [r7, #7]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b38:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <HAL_InitTick+0x6c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d023      	beq.n	8000b88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_InitTick+0x70>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <HAL_InitTick+0x6c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f949 	bl	8000dee <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10f      	bne.n	8000b82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d809      	bhi.n	8000b7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f913 	bl	8000d9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <HAL_InitTick+0x74>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	e007      	b.n	8000b8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	e004      	b.n	8000b8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
 8000b86:	e001      	b.n	8000b8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000054 	.word	0x20000054

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	@ (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000054 	.word	0x20000054

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	@ (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	@ (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	@ 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	@ 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff8e 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff29 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff3e 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff31 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa2 	bl	8000d40 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	e17f      	b.n	8001118 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 8171 	beq.w	8001112 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d005      	beq.n	8000e48 <HAL_GPIO_Init+0x40>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d130      	bne.n	8000eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e7e:	2201      	movs	r2, #1
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	f003 0201 	and.w	r2, r3, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d118      	bne.n	8000ee8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d017      	beq.n	8000f24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	6939      	ldr	r1, [r7, #16]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80ac 	beq.w	8001112 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b5f      	ldr	r3, [pc, #380]	@ (8001138 <HAL_GPIO_Init+0x330>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fbe:	4a5e      	ldr	r2, [pc, #376]	@ (8001138 <HAL_GPIO_Init+0x330>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fc6:	4b5c      	ldr	r3, [pc, #368]	@ (8001138 <HAL_GPIO_Init+0x330>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd2:	4a5a      	ldr	r2, [pc, #360]	@ (800113c <HAL_GPIO_Init+0x334>)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x242>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4f      	ldr	r2, [pc, #316]	@ (8001140 <HAL_GPIO_Init+0x338>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x23e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4e      	ldr	r2, [pc, #312]	@ (8001144 <HAL_GPIO_Init+0x33c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x23a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4d      	ldr	r2, [pc, #308]	@ (8001148 <HAL_GPIO_Init+0x340>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x236>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4c      	ldr	r2, [pc, #304]	@ (800114c <HAL_GPIO_Init+0x344>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x232>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4b      	ldr	r2, [pc, #300]	@ (8001150 <HAL_GPIO_Init+0x348>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x22e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4a      	ldr	r2, [pc, #296]	@ (8001154 <HAL_GPIO_Init+0x34c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x22a>
 800102e:	2306      	movs	r3, #6
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x244>
 8001032:	2307      	movs	r3, #7
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x244>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x244>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x244>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x244>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x244>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x244>
 800104a:	2300      	movs	r3, #0
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800105c:	4937      	ldr	r1, [pc, #220]	@ (800113c <HAL_GPIO_Init+0x334>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800106a:	4b3b      	ldr	r3, [pc, #236]	@ (8001158 <HAL_GPIO_Init+0x350>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800108e:	4a32      	ldr	r2, [pc, #200]	@ (8001158 <HAL_GPIO_Init+0x350>)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001094:	4b30      	ldr	r3, [pc, #192]	@ (8001158 <HAL_GPIO_Init+0x350>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010b8:	4a27      	ldr	r2, [pc, #156]	@ (8001158 <HAL_GPIO_Init+0x350>)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010be:	4b26      	ldr	r3, [pc, #152]	@ (8001158 <HAL_GPIO_Init+0x350>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001158 <HAL_GPIO_Init+0x350>)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <HAL_GPIO_Init+0x350>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800110c:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <HAL_GPIO_Init+0x350>)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa22 f303 	lsr.w	r3, r2, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	f47f ae78 	bne.w	8000e18 <HAL_GPIO_Init+0x10>
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	371c      	adds	r7, #28
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	48000400 	.word	0x48000400
 8001144:	48000800 	.word	0x48000800
 8001148:	48000c00 	.word	0x48000c00
 800114c:	48001000 	.word	0x48001000
 8001150:	48001400 	.word	0x48001400
 8001154:	48001800 	.word	0x48001800
 8001158:	40010400 	.word	0x40010400

0800115c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	887b      	ldrh	r3, [r7, #2]
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e001      	b.n	800117e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43d9      	mvns	r1, r3
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	400b      	ands	r3, r1
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	4013      	ands	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fad8 	bl	80007c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40010400 	.word	0x40010400

08001220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001224:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <HAL_PWREx_GetVoltageRange+0x18>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40007000 	.word	0x40007000

0800123c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800124a:	d130      	bne.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800124c:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001258:	d038      	beq.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800125a:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001262:	4a1e      	ldr	r2, [pc, #120]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001264:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001268:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800126a:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2232      	movs	r2, #50	@ 0x32
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0c9b      	lsrs	r3, r3, #18
 800127c:	3301      	adds	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001280:	e002      	b.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3b01      	subs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001294:	d102      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f2      	bne.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a8:	d110      	bne.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e00f      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ba:	d007      	beq.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012c4:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40007000 	.word	0x40007000
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e3ca      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fa:	4b97      	ldr	r3, [pc, #604]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001304:	4b94      	ldr	r3, [pc, #592]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80e4 	beq.w	80014e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <HAL_RCC_OscConfig+0x4a>
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b0c      	cmp	r3, #12
 8001326:	f040 808b 	bne.w	8001440 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b01      	cmp	r3, #1
 800132e:	f040 8087 	bne.w	8001440 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001332:	4b89      	ldr	r3, [pc, #548]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <HAL_RCC_OscConfig+0x62>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e3a2      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1a      	ldr	r2, [r3, #32]
 800134e:	4b82      	ldr	r3, [pc, #520]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <HAL_RCC_OscConfig+0x7c>
 800135a:	4b7f      	ldr	r3, [pc, #508]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001362:	e005      	b.n	8001370 <HAL_RCC_OscConfig+0x88>
 8001364:	4b7c      	ldr	r3, [pc, #496]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001370:	4293      	cmp	r3, r2
 8001372:	d223      	bcs.n	80013bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fd1d 	bl	8001db8 <RCC_SetFlashLatencyFromMSIRange>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e383      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001388:	4b73      	ldr	r3, [pc, #460]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a72      	ldr	r2, [pc, #456]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b70      	ldr	r3, [pc, #448]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	496d      	ldr	r1, [pc, #436]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	4968      	ldr	r1, [pc, #416]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
 80013ba:	e025      	b.n	8001408 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013bc:	4b66      	ldr	r3, [pc, #408]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a65      	ldr	r2, [pc, #404]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b63      	ldr	r3, [pc, #396]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4960      	ldr	r1, [pc, #384]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013da:	4b5f      	ldr	r3, [pc, #380]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	495b      	ldr	r1, [pc, #364]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d109      	bne.n	8001408 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fcdd 	bl	8001db8 <RCC_SetFlashLatencyFromMSIRange>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e343      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001408:	f000 fc4a 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 800140c:	4602      	mov	r2, r0
 800140e:	4b52      	ldr	r3, [pc, #328]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	4950      	ldr	r1, [pc, #320]	@ (800155c <HAL_RCC_OscConfig+0x274>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	4a4e      	ldr	r2, [pc, #312]	@ (8001560 <HAL_RCC_OscConfig+0x278>)
 8001426:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001428:	4b4e      	ldr	r3, [pc, #312]	@ (8001564 <HAL_RCC_OscConfig+0x27c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fb7d 	bl	8000b2c <HAL_InitTick>
 8001432:	4603      	mov	r3, r0
 8001434:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d052      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	e327      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d032      	beq.n	80014ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001448:	4b43      	ldr	r3, [pc, #268]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a42      	ldr	r2, [pc, #264]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001454:	f7ff fbba 	bl	8000bcc <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800145c:	f7ff fbb6 	bl	8000bcc <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e310      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146e:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147a:	4b37      	ldr	r3, [pc, #220]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a36      	ldr	r2, [pc, #216]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b34      	ldr	r3, [pc, #208]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4931      	ldr	r1, [pc, #196]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001498:	4b2f      	ldr	r3, [pc, #188]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	492c      	ldr	r1, [pc, #176]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	e01a      	b.n	80014e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a29      	ldr	r2, [pc, #164]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb87 	bl	8000bcc <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c2:	f7ff fb83 	bl	8000bcc <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e2dd      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d4:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x1da>
 80014e0:	e000      	b.n	80014e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d074      	beq.n	80015da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x21a>
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b0c      	cmp	r3, #12
 80014fa:	d10e      	bne.n	800151a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d10b      	bne.n	800151a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d064      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d160      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e2ba      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x24a>
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0b      	ldr	r2, [pc, #44]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800152a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e026      	b.n	8001580 <HAL_RCC_OscConfig+0x298>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800153a:	d115      	bne.n	8001568 <HAL_RCC_OscConfig+0x280>
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 8001542:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b03      	ldr	r3, [pc, #12]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a02      	ldr	r2, [pc, #8]	@ (8001558 <HAL_RCC_OscConfig+0x270>)
 800154e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e014      	b.n	8001580 <HAL_RCC_OscConfig+0x298>
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	08005f80 	.word	0x08005f80
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004
 8001568:	4ba0      	ldr	r3, [pc, #640]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a9f      	ldr	r2, [pc, #636]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b9d      	ldr	r3, [pc, #628]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a9c      	ldr	r2, [pc, #624]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fb20 	bl	8000bcc <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fb1c 	bl	8000bcc <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e276      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a2:	4b92      	ldr	r3, [pc, #584]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x2a8>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb0c 	bl	8000bcc <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fb08 	bl	8000bcc <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e262      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ca:	4b88      	ldr	r3, [pc, #544]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2d0>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d060      	beq.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_OscConfig+0x310>
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d119      	bne.n	8001626 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d116      	bne.n	8001626 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f8:	4b7c      	ldr	r3, [pc, #496]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_OscConfig+0x328>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e23f      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b76      	ldr	r3, [pc, #472]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	4973      	ldr	r1, [pc, #460]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001624:	e040      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d023      	beq.n	8001676 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162e:	4b6f      	ldr	r3, [pc, #444]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6e      	ldr	r2, [pc, #440]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fac7 	bl	8000bcc <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff fac3 	bl	8000bcc <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e21d      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001654:	4b65      	ldr	r3, [pc, #404]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b62      	ldr	r3, [pc, #392]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	061b      	lsls	r3, r3, #24
 800166e:	495f      	ldr	r1, [pc, #380]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
 8001674:	e018      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001676:	4b5d      	ldr	r3, [pc, #372]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a5c      	ldr	r2, [pc, #368]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 800167c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff faa3 	bl	8000bcc <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff fa9f 	bl	8000bcc <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1f9      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800169c:	4b53      	ldr	r3, [pc, #332]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d03c      	beq.n	800172e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016bc:	4b4b      	ldr	r3, [pc, #300]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c2:	4a4a      	ldr	r2, [pc, #296]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff fa7e 	bl	8000bcc <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fa7a 	bl	8000bcc <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1d4      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e6:	4b41      	ldr	r3, [pc, #260]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80016e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ef      	beq.n	80016d4 <HAL_RCC_OscConfig+0x3ec>
 80016f4:	e01b      	b.n	800172e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016fc:	4a3b      	ldr	r2, [pc, #236]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001706:	f7ff fa61 	bl	8000bcc <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff fa5d 	bl	8000bcc <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1b7      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001720:	4b32      	ldr	r3, [pc, #200]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ef      	bne.n	800170e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80a6 	beq.w	8001888 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001740:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10d      	bne.n	8001768 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	4b27      	ldr	r3, [pc, #156]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001750:	4a26      	ldr	r2, [pc, #152]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 8001752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001756:	6593      	str	r3, [r2, #88]	@ 0x58
 8001758:	4b24      	ldr	r3, [pc, #144]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001764:	2301      	movs	r3, #1
 8001766:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001768:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <HAL_RCC_OscConfig+0x508>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d118      	bne.n	80017a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001774:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <HAL_RCC_OscConfig+0x508>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1d      	ldr	r2, [pc, #116]	@ (80017f0 <HAL_RCC_OscConfig+0x508>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001780:	f7ff fa24 	bl	8000bcc <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7ff fa20 	bl	8000bcc <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e17a      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_RCC_OscConfig+0x508>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4d8>
 80017ae:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80017b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b4:	4a0d      	ldr	r2, [pc, #52]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017be:	e029      	b.n	8001814 <HAL_RCC_OscConfig+0x52c>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d115      	bne.n	80017f4 <HAL_RCC_OscConfig+0x50c>
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ce:	4a07      	ldr	r2, [pc, #28]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017de:	4a03      	ldr	r2, [pc, #12]	@ (80017ec <HAL_RCC_OscConfig+0x504>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017e8:	e014      	b.n	8001814 <HAL_RCC_OscConfig+0x52c>
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40007000 	.word	0x40007000
 80017f4:	4b9c      	ldr	r3, [pc, #624]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fa:	4a9b      	ldr	r2, [pc, #620]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001804:	4b98      	ldr	r3, [pc, #608]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180a:	4a97      	ldr	r2, [pc, #604]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d016      	beq.n	800184a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff f9d6 	bl	8000bcc <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001822:	e00a      	b.n	800183a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff f9d2 	bl	8000bcc <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e12a      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 800183c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ed      	beq.n	8001824 <HAL_RCC_OscConfig+0x53c>
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff f9bf 	bl	8000bcc <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff f9bb 	bl	8000bcc <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e113      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001868:	4b7f      	ldr	r3, [pc, #508]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1ed      	bne.n	8001852 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001876:	7ffb      	ldrb	r3, [r7, #31]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001880:	4a79      	ldr	r2, [pc, #484]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001882:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001886:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80fe 	beq.w	8001a8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001896:	2b02      	cmp	r3, #2
 8001898:	f040 80d0 	bne.w	8001a3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800189c:	4b72      	ldr	r3, [pc, #456]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d130      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	3b01      	subs	r3, #1
 80018bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d127      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d11f      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018dc:	2a07      	cmp	r2, #7
 80018de:	bf14      	ite	ne
 80018e0:	2201      	movne	r2, #1
 80018e2:	2200      	moveq	r2, #0
 80018e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d113      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d109      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	3b01      	subs	r3, #1
 800190c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d06e      	beq.n	80019f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d069      	beq.n	80019ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001918:	4b53      	ldr	r3, [pc, #332]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001924:	4b50      	ldr	r3, [pc, #320]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0ad      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001934:	4b4c      	ldr	r3, [pc, #304]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a4b      	ldr	r2, [pc, #300]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001940:	f7ff f944 	bl	8000bcc <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff f940 	bl	8000bcc <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e09a      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195a:	4b43      	ldr	r3, [pc, #268]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001966:	4b40      	ldr	r3, [pc, #256]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	4b40      	ldr	r3, [pc, #256]	@ (8001a6c <HAL_RCC_OscConfig+0x784>)
 800196c:	4013      	ands	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001976:	3a01      	subs	r2, #1
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	4311      	orrs	r1, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001980:	0212      	lsls	r2, r2, #8
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001988:	0852      	lsrs	r2, r2, #1
 800198a:	3a01      	subs	r2, #1
 800198c:	0552      	lsls	r2, r2, #21
 800198e:	4311      	orrs	r1, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001994:	0852      	lsrs	r2, r2, #1
 8001996:	3a01      	subs	r2, #1
 8001998:	0652      	lsls	r2, r2, #25
 800199a:	4311      	orrs	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019a0:	0912      	lsrs	r2, r2, #4
 80019a2:	0452      	lsls	r2, r2, #17
 80019a4:	430a      	orrs	r2, r1
 80019a6:	4930      	ldr	r1, [pc, #192]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c4:	f7ff f902 	bl	8000bcc <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f8fe 	bl	8000bcc <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e058      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ea:	e050      	b.n	8001a8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e04f      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d148      	bne.n	8001a8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4a16      	ldr	r2, [pc, #88]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a14:	f7ff f8da 	bl	8000bcc <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff f8d6 	bl	8000bcc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e030      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x734>
 8001a3a:	e028      	b.n	8001a8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d023      	beq.n	8001a8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f8bd 	bl	8000bcc <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	e00c      	b.n	8001a70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a56:	f7ff f8b9 	bl	8000bcc <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d905      	bls.n	8001a70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e013      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a70:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_RCC_OscConfig+0x7b0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ec      	bne.n	8001a56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_RCC_OscConfig+0x7b0>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4905      	ldr	r1, [pc, #20]	@ (8001a98 <HAL_RCC_OscConfig+0x7b0>)
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_RCC_OscConfig+0x7b4>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
 8001a88:	e001      	b.n	8001a8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	feeefffc 	.word	0xfeeefffc

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0e7      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b75      	ldr	r3, [pc, #468]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d910      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b72      	ldr	r3, [pc, #456]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0207 	bic.w	r2, r3, #7
 8001aca:	4970      	ldr	r1, [pc, #448]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0cf      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d010      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b66      	ldr	r3, [pc, #408]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d908      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b63      	ldr	r3, [pc, #396]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4960      	ldr	r1, [pc, #384]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d04c      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b26:	4b5a      	ldr	r3, [pc, #360]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d121      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0a6      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3e:	4b54      	ldr	r3, [pc, #336]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d115      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e09a      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b56:	4b4e      	ldr	r3, [pc, #312]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e08e      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b66:	4b4a      	ldr	r3, [pc, #296]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e086      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b46      	ldr	r3, [pc, #280]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4943      	ldr	r1, [pc, #268]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b88:	f7ff f820 	bl	8000bcc <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7ff f81c 	bl	8000bcc <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e06e      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d010      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d208      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	492b      	ldr	r1, [pc, #172]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be6:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d210      	bcs.n	8001c16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf4:	4b25      	ldr	r3, [pc, #148]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 0207 	bic.w	r2, r3, #7
 8001bfc:	4923      	ldr	r1, [pc, #140]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c04:	4b21      	ldr	r3, [pc, #132]	@ (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e036      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d008      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c22:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	4918      	ldr	r1, [pc, #96]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d009      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4910      	ldr	r1, [pc, #64]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c54:	f000 f824 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	490b      	ldr	r1, [pc, #44]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f4>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	4a09      	ldr	r2, [pc, #36]	@ (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001c72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c74:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <HAL_RCC_ClockConfig+0x1fc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe ff57 	bl	8000b2c <HAL_InitTick>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c82:	7afb      	ldrb	r3, [r7, #11]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40022000 	.word	0x40022000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	08005f80 	.word	0x08005f80
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	@ 0x24
 8001ca4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cae:	4b3e      	ldr	r3, [pc, #248]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d121      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d11e      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cd4:	4b34      	ldr	r3, [pc, #208]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ce0:	4b31      	ldr	r3, [pc, #196]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e005      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d18:	4b25      	ldr	r3, [pc, #148]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	e004      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d24:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d134      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d003      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d003      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0xac>
 8001d44:	e005      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d48:	617b      	str	r3, [r7, #20]
      break;
 8001d4a:	e005      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d4e:	617b      	str	r3, [r7, #20]
      break;
 8001d50:	e002      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	617b      	str	r3, [r7, #20]
      break;
 8001d56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	3301      	adds	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	0a1b      	lsrs	r3, r3, #8
 8001d6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	fb03 f202 	mul.w	r2, r3, r2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	0e5b      	lsrs	r3, r3, #25
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d98:	69bb      	ldr	r3, [r7, #24]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	@ 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08005f90 	.word	0x08005f90
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	007a1200 	.word	0x007a1200

08001db8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dd0:	f7ff fa26 	bl	8001220 <HAL_PWREx_GetVoltageRange>
 8001dd4:	6178      	str	r0, [r7, #20]
 8001dd6:	e014      	b.n	8001e02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	4a24      	ldr	r2, [pc, #144]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de4:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001df0:	f7ff fa16 	bl	8001220 <HAL_PWREx_GetVoltageRange>
 8001df4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e08:	d10b      	bne.n	8001e22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b80      	cmp	r3, #128	@ 0x80
 8001e0e:	d919      	bls.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e14:	d902      	bls.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e16:	2302      	movs	r3, #2
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	e013      	b.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	e010      	b.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b80      	cmp	r3, #128	@ 0x80
 8001e26:	d902      	bls.n	8001e2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e28:	2303      	movs	r3, #3
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	e00a      	b.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b80      	cmp	r3, #128	@ 0x80
 8001e32:	d102      	bne.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e34:	2302      	movs	r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e004      	b.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b70      	cmp	r3, #112	@ 0x70
 8001e3e:	d101      	bne.n	8001e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e40:	2301      	movs	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 0207 	bic.w	r2, r3, #7
 8001e4c:	4909      	ldr	r1, [pc, #36]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e54:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d001      	beq.n	8001e66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40022000 	.word	0x40022000

08001e78 <__NVIC_SetPriority>:
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0a      	blt.n	8001ea2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	490c      	ldr	r1, [pc, #48]	@ (8001ec4 <__NVIC_SetPriority+0x4c>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ea0:	e00a      	b.n	8001eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4908      	ldr	r1, [pc, #32]	@ (8001ec8 <__NVIC_SetPriority+0x50>)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	3b04      	subs	r3, #4
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	761a      	strb	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	f06f 0004 	mvn.w	r0, #4
 8001ed6:	f7ff ffcf 	bl	8001e78 <__NVIC_SetPriority>
#endif
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ee6:	f3ef 8305 	mrs	r3, IPSR
 8001eea:	603b      	str	r3, [r7, #0]
  return(result);
 8001eec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ef2:	f06f 0305 	mvn.w	r3, #5
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	e00c      	b.n	8001f14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <osKernelInitialize+0x44>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f02:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <osKernelInitialize+0x44>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	e002      	b.n	8001f14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f14:	687b      	ldr	r3, [r7, #4]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000058 	.word	0x20000058

08001f28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f2e:	f3ef 8305 	mrs	r3, IPSR
 8001f32:	603b      	str	r3, [r7, #0]
  return(result);
 8001f34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f3a:	f06f 0305 	mvn.w	r3, #5
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	e010      	b.n	8001f64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <osKernelStart+0x48>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d109      	bne.n	8001f5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f4a:	f7ff ffbf 	bl	8001ecc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <osKernelStart+0x48>)
 8001f50:	2202      	movs	r2, #2
 8001f52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f54:	f002 f898 	bl	8004088 <vTaskStartScheduler>
      stat = osOK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	e002      	b.n	8001f64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000058 	.word	0x20000058

08001f74 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f7a:	f3ef 8305 	mrs	r3, IPSR
 8001f7e:	603b      	str	r3, [r7, #0]
  return(result);
 8001f80:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8001f86:	f002 f9a3 	bl	80042d0 <xTaskGetTickCountFromISR>
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	e002      	b.n	8001f94 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8001f8e:	f002 f98f 	bl	80042b0 <xTaskGetTickCount>
 8001f92:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8001f94:	687b      	ldr	r3, [r7, #4]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b08e      	sub	sp, #56	@ 0x38
 8001fa2:	af04      	add	r7, sp, #16
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fae:	f3ef 8305 	mrs	r3, IPSR
 8001fb2:	617b      	str	r3, [r7, #20]
  return(result);
 8001fb4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d17e      	bne.n	80020b8 <osThreadNew+0x11a>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d07b      	beq.n	80020b8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001fc4:	2318      	movs	r3, #24
 8001fc6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d045      	beq.n	8002064 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <osThreadNew+0x48>
        name = attr->name;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <osThreadNew+0x6e>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	2b38      	cmp	r3, #56	@ 0x38
 8001ffe:	d805      	bhi.n	800200c <osThreadNew+0x6e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <osThreadNew+0x72>
        return (NULL);
 800200c:	2300      	movs	r3, #0
 800200e:	e054      	b.n	80020ba <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00e      	beq.n	8002046 <osThreadNew+0xa8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b5b      	cmp	r3, #91	@ 0x5b
 800202e:	d90a      	bls.n	8002046 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002034:	2b00      	cmp	r3, #0
 8002036:	d006      	beq.n	8002046 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <osThreadNew+0xa8>
        mem = 1;
 8002040:	2301      	movs	r3, #1
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	e010      	b.n	8002068 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <osThreadNew+0xca>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d108      	bne.n	8002068 <osThreadNew+0xca>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d104      	bne.n	8002068 <osThreadNew+0xca>
          mem = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	e001      	b.n	8002068 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d110      	bne.n	8002090 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002076:	9202      	str	r2, [sp, #8]
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f001 fe23 	bl	8003cd0 <xTaskCreateStatic>
 800208a:	4603      	mov	r3, r0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	e013      	b.n	80020b8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d110      	bne.n	80020b8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	b29a      	uxth	r2, r3
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f001 fe71 	bl	8003d90 <xTaskCreate>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d001      	beq.n	80020b8 <osThreadNew+0x11a>
            hTask = NULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80020b8:	693b      	ldr	r3, [r7, #16]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3728      	adds	r7, #40	@ 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020ca:	f3ef 8305 	mrs	r3, IPSR
 80020ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80020d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <osDelay+0x1c>
    stat = osErrorISR;
 80020d6:	f06f 0305 	mvn.w	r3, #5
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e007      	b.n	80020ee <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <osDelay+0x2c>
      vTaskDelay(ticks);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f001 ff97 	bl	800401c <vTaskDelay>
    }
  }

  return (stat);
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f003 fa0b 	bl	800551c <pvTimerGetTimerID>
 8002106:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <TimerCallback+0x22>
    callb->func (callb->arg);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	6852      	ldr	r2, [r2, #4]
 8002116:	4610      	mov	r0, r2
 8002118:	4798      	blx	r3
  }
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b08c      	sub	sp, #48	@ 0x30
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	460b      	mov	r3, r1
 8002132:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002138:	f3ef 8305 	mrs	r3, IPSR
 800213c:	613b      	str	r3, [r7, #16]
  return(result);
 800213e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8002140:	2b00      	cmp	r3, #0
 8002142:	d163      	bne.n	800220c <osTimerNew+0xe8>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d060      	beq.n	800220c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800214a:	2008      	movs	r0, #8
 800214c:	f003 fc5e 	bl	8005a0c <pvPortMalloc>
 8002150:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d059      	beq.n	800220c <osTimerNew+0xe8>
      callb->func = func;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <osTimerNew+0x4c>
        reload = pdFALSE;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e001      	b.n	8002174 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8002170:	2301      	movs	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01c      	beq.n	80021be <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <osTimerNew+0x6e>
          name = attr->name;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <osTimerNew+0x84>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b2b      	cmp	r3, #43	@ 0x2b
 80021a0:	d902      	bls.n	80021a8 <osTimerNew+0x84>
          mem = 1;
 80021a2:	2301      	movs	r3, #1
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	e00c      	b.n	80021c2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d108      	bne.n	80021c2 <osTimerNew+0x9e>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d104      	bne.n	80021c2 <osTimerNew+0x9e>
            mem = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	e001      	b.n	80021c2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d10c      	bne.n	80021e2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <osTimerNew+0xf4>)
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	2101      	movs	r1, #1
 80021d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021da:	f002 fe12 	bl	8004e02 <xTimerCreateStatic>
 80021de:	6238      	str	r0, [r7, #32]
 80021e0:	e00b      	b.n	80021fa <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d108      	bne.n	80021fa <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <osTimerNew+0xf4>)
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	2101      	movs	r1, #1
 80021f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021f4:	f002 fde4 	bl	8004dc0 <xTimerCreate>
 80021f8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <osTimerNew+0xe8>
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <osTimerNew+0xe8>
        vPortFree (callb);
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f003 fcce 	bl	8005ba8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800220c:	6a3b      	ldr	r3, [r7, #32]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3728      	adds	r7, #40	@ 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	080020f9 	.word	0x080020f9

0800221c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af02      	add	r7, sp, #8
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800222a:	f3ef 8305 	mrs	r3, IPSR
 800222e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002230:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <osTimerStart+0x22>
    stat = osErrorISR;
 8002236:	f06f 0305 	mvn.w	r3, #5
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e017      	b.n	800226e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d103      	bne.n	800224c <osTimerStart+0x30>
    stat = osErrorParameter;
 8002244:	f06f 0303 	mvn.w	r3, #3
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	e010      	b.n	800226e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800224c:	2300      	movs	r3, #0
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2300      	movs	r3, #0
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	2104      	movs	r1, #4
 8002256:	6938      	ldr	r0, [r7, #16]
 8002258:	f002 fe50 	bl	8004efc <xTimerGenericCommand>
 800225c:	4603      	mov	r3, r0
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <osTimerStart+0x4c>
      stat = osOK;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e002      	b.n	800226e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8002268:	f06f 0302 	mvn.w	r3, #2
 800226c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800226e:	697b      	ldr	r3, [r7, #20]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002284:	f3ef 8305 	mrs	r3, IPSR
 8002288:	60bb      	str	r3, [r7, #8]
  return(result);
 800228a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800228c:	2b00      	cmp	r3, #0
 800228e:	d174      	bne.n	800237a <osMutexNew+0x102>
    if (attr != NULL) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <osMutexNew+0x26>
      type = attr->attr_bits;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	e001      	b.n	80022a2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <osMutexNew+0x3a>
      rmtx = 1U;
 80022ac:	2301      	movs	r3, #1
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e001      	b.n	80022b6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d15c      	bne.n	800237a <osMutexNew+0x102>
      mem = -1;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d015      	beq.n	80022f8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <osMutexNew+0x6a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b4f      	cmp	r3, #79	@ 0x4f
 80022da:	d902      	bls.n	80022e2 <osMutexNew+0x6a>
          mem = 1;
 80022dc:	2301      	movs	r3, #1
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	e00c      	b.n	80022fc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d108      	bne.n	80022fc <osMutexNew+0x84>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d104      	bne.n	80022fc <osMutexNew+0x84>
            mem = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	e001      	b.n	80022fc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d112      	bne.n	8002328 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4619      	mov	r1, r3
 800230e:	2004      	movs	r0, #4
 8002310:	f000 fd71 	bl	8002df6 <xQueueCreateMutexStatic>
 8002314:	61f8      	str	r0, [r7, #28]
 8002316:	e016      	b.n	8002346 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4619      	mov	r1, r3
 800231e:	2001      	movs	r0, #1
 8002320:	f000 fd69 	bl	8002df6 <xQueueCreateMutexStatic>
 8002324:	61f8      	str	r0, [r7, #28]
 8002326:	e00e      	b.n	8002346 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10b      	bne.n	8002346 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002334:	2004      	movs	r0, #4
 8002336:	f000 fd46 	bl	8002dc6 <xQueueCreateMutex>
 800233a:	61f8      	str	r0, [r7, #28]
 800233c:	e003      	b.n	8002346 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800233e:	2001      	movs	r0, #1
 8002340:	f000 fd41 	bl	8002dc6 <xQueueCreateMutex>
 8002344:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00c      	beq.n	8002366 <osMutexNew+0xee>
        if (attr != NULL) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <osMutexNew+0xe2>
          name = attr->name;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e001      	b.n	800235e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800235e:	68f9      	ldr	r1, [r7, #12]
 8002360:	69f8      	ldr	r0, [r7, #28]
 8002362:	f001 fc2d 	bl	8003bc0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <osMutexNew+0x102>
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800237a:	69fb      	ldr	r3, [r7, #28]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023a2:	f3ef 8305 	mrs	r3, IPSR
 80023a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80023a8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80023ae:	f06f 0305 	mvn.w	r3, #5
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	e02c      	b.n	8002410 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d103      	bne.n	80023c4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80023bc:	f06f 0303 	mvn.w	r3, #3
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e025      	b.n	8002410 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d011      	beq.n	80023ee <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80023ca:	6839      	ldr	r1, [r7, #0]
 80023cc:	6938      	ldr	r0, [r7, #16]
 80023ce:	f000 fd62 	bl	8002e96 <xQueueTakeMutexRecursive>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d01b      	beq.n	8002410 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80023de:	f06f 0301 	mvn.w	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e014      	b.n	8002410 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80023e6:	f06f 0302 	mvn.w	r3, #2
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e010      	b.n	8002410 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80023ee:	6839      	ldr	r1, [r7, #0]
 80023f0:	6938      	ldr	r0, [r7, #16]
 80023f2:	f001 f907 	bl	8003604 <xQueueSemaphoreTake>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d009      	beq.n	8002410 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002402:	f06f 0301 	mvn.w	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	e002      	b.n	8002410 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800240a:	f06f 0302 	mvn.w	r3, #2
 800240e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002410:	697b      	ldr	r3, [r7, #20]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002436:	f3ef 8305 	mrs	r3, IPSR
 800243a:	60bb      	str	r3, [r7, #8]
  return(result);
 800243c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <osMutexRelease+0x30>
    stat = osErrorISR;
 8002442:	f06f 0305 	mvn.w	r3, #5
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e01f      	b.n	800248a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d103      	bne.n	8002458 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8002450:	f06f 0303 	mvn.w	r3, #3
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e018      	b.n	800248a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800245e:	6938      	ldr	r0, [r7, #16]
 8002460:	f000 fce4 	bl	8002e2c <xQueueGiveMutexRecursive>
 8002464:	4603      	mov	r3, r0
 8002466:	2b01      	cmp	r3, #1
 8002468:	d00f      	beq.n	800248a <osMutexRelease+0x70>
        stat = osErrorResource;
 800246a:	f06f 0302 	mvn.w	r3, #2
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e00b      	b.n	800248a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002472:	2300      	movs	r3, #0
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	6938      	ldr	r0, [r7, #16]
 800247a:	f000 fdb1 	bl	8002fe0 <xQueueGenericSend>
 800247e:	4603      	mov	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	d002      	beq.n	800248a <osMutexRelease+0x70>
        stat = osErrorResource;
 8002484:	f06f 0302 	mvn.w	r3, #2
 8002488:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800248a:	697b      	ldr	r3, [r7, #20]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b08a      	sub	sp, #40	@ 0x28
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024a4:	f3ef 8305 	mrs	r3, IPSR
 80024a8:	613b      	str	r3, [r7, #16]
  return(result);
 80024aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d175      	bne.n	800259c <osSemaphoreNew+0x108>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d072      	beq.n	800259c <osSemaphoreNew+0x108>
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d86e      	bhi.n	800259c <osSemaphoreNew+0x108>
    mem = -1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d015      	beq.n	80024f6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <osSemaphoreNew+0x4c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b4f      	cmp	r3, #79	@ 0x4f
 80024d8:	d902      	bls.n	80024e0 <osSemaphoreNew+0x4c>
        mem = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	e00c      	b.n	80024fa <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d108      	bne.n	80024fa <osSemaphoreNew+0x66>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d104      	bne.n	80024fa <osSemaphoreNew+0x66>
          mem = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	e001      	b.n	80024fa <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d04c      	beq.n	800259c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d128      	bne.n	800255a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d10a      	bne.n	8002524 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2203      	movs	r2, #3
 8002514:	9200      	str	r2, [sp, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2001      	movs	r0, #1
 800251c:	f000 fb5e 	bl	8002bdc <xQueueGenericCreateStatic>
 8002520:	61f8      	str	r0, [r7, #28]
 8002522:	e005      	b.n	8002530 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002524:	2203      	movs	r2, #3
 8002526:	2100      	movs	r1, #0
 8002528:	2001      	movs	r0, #1
 800252a:	f000 fbd4 	bl	8002cd6 <xQueueGenericCreate>
 800252e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d022      	beq.n	800257c <osSemaphoreNew+0xe8>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01f      	beq.n	800257c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800253c:	2300      	movs	r3, #0
 800253e:	2200      	movs	r2, #0
 8002540:	2100      	movs	r1, #0
 8002542:	69f8      	ldr	r0, [r7, #28]
 8002544:	f000 fd4c 	bl	8002fe0 <xQueueGenericSend>
 8002548:	4603      	mov	r3, r0
 800254a:	2b01      	cmp	r3, #1
 800254c:	d016      	beq.n	800257c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800254e:	69f8      	ldr	r0, [r7, #28]
 8002550:	f001 f9ea 	bl	8003928 <vQueueDelete>
            hSemaphore = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	e010      	b.n	800257c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d108      	bne.n	8002572 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	461a      	mov	r2, r3
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fccb 	bl	8002f04 <xQueueCreateCountingSemaphoreStatic>
 800256e:	61f8      	str	r0, [r7, #28]
 8002570:	e004      	b.n	800257c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fcfe 	bl	8002f76 <xQueueCreateCountingSemaphore>
 800257a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <osSemaphoreNew+0xfc>
          name = attr->name;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e001      	b.n	8002594 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002594:	6979      	ldr	r1, [r7, #20]
 8002596:	69f8      	ldr	r0, [r7, #28]
 8002598:	f001 fb12 	bl	8003bc0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800259c:	69fb      	ldr	r3, [r7, #28]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d103      	bne.n	80025c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80025c0:	f06f 0303 	mvn.w	r3, #3
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	e039      	b.n	800263c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025c8:	f3ef 8305 	mrs	r3, IPSR
 80025cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80025ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d022      	beq.n	800261a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80025da:	f06f 0303 	mvn.w	r3, #3
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e02c      	b.n	800263c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	461a      	mov	r2, r3
 80025ec:	2100      	movs	r1, #0
 80025ee:	6938      	ldr	r0, [r7, #16]
 80025f0:	f001 f918 	bl	8003824 <xQueueReceiveFromISR>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d003      	beq.n	8002602 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80025fa:	f06f 0302 	mvn.w	r3, #2
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e01c      	b.n	800263c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d019      	beq.n	800263c <osSemaphoreAcquire+0x94>
 8002608:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <osSemaphoreAcquire+0xa0>)
 800260a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	e010      	b.n	800263c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800261a:	6839      	ldr	r1, [r7, #0]
 800261c:	6938      	ldr	r0, [r7, #16]
 800261e:	f000 fff1 	bl	8003604 <xQueueSemaphoreTake>
 8002622:	4603      	mov	r3, r0
 8002624:	2b01      	cmp	r3, #1
 8002626:	d009      	beq.n	800263c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800262e:	f06f 0301 	mvn.w	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	e002      	b.n	800263c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002636:	f06f 0302 	mvn.w	r3, #2
 800263a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800263c:	697b      	ldr	r3, [r7, #20]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000ed04 	.word	0xe000ed04

0800264c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002662:	f06f 0303 	mvn.w	r3, #3
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e02c      	b.n	80026c4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800266a:	f3ef 8305 	mrs	r3, IPSR
 800266e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002670:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01a      	beq.n	80026ac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	4619      	mov	r1, r3
 8002680:	6938      	ldr	r0, [r7, #16]
 8002682:	f000 fe4d 	bl	8003320 <xQueueGiveFromISR>
 8002686:	4603      	mov	r3, r0
 8002688:	2b01      	cmp	r3, #1
 800268a:	d003      	beq.n	8002694 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800268c:	f06f 0302 	mvn.w	r3, #2
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e017      	b.n	80026c4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d014      	beq.n	80026c4 <osSemaphoreRelease+0x78>
 800269a:	4b0d      	ldr	r3, [pc, #52]	@ (80026d0 <osSemaphoreRelease+0x84>)
 800269c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	e00b      	b.n	80026c4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80026ac:	2300      	movs	r3, #0
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	6938      	ldr	r0, [r7, #16]
 80026b4:	f000 fc94 	bl	8002fe0 <xQueueGenericSend>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d002      	beq.n	80026c4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80026be:	f06f 0302 	mvn.w	r3, #2
 80026c2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80026c4:	697b      	ldr	r3, [r7, #20]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000ed04 	.word	0xe000ed04

080026d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	@ 0x28
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026e4:	f3ef 8305 	mrs	r3, IPSR
 80026e8:	613b      	str	r3, [r7, #16]
  return(result);
 80026ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d15f      	bne.n	80027b0 <osMessageQueueNew+0xdc>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d05c      	beq.n	80027b0 <osMessageQueueNew+0xdc>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d059      	beq.n	80027b0 <osMessageQueueNew+0xdc>
    mem = -1;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d029      	beq.n	800275c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <osMessageQueueNew+0x62>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b4f      	cmp	r3, #79	@ 0x4f
 8002716:	d90e      	bls.n	8002736 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	429a      	cmp	r2, r3
 800272e:	d302      	bcc.n	8002736 <osMessageQueueNew+0x62>
        mem = 1;
 8002730:	2301      	movs	r3, #1
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e014      	b.n	8002760 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d110      	bne.n	8002760 <osMessageQueueNew+0x8c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <osMessageQueueNew+0x8c>
          mem = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	e001      	b.n	8002760 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10b      	bne.n	800277e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2100      	movs	r1, #0
 8002770:	9100      	str	r1, [sp, #0]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fa31 	bl	8002bdc <xQueueGenericCreateStatic>
 800277a:	61f8      	str	r0, [r7, #28]
 800277c:	e008      	b.n	8002790 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002784:	2200      	movs	r2, #0
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 faa4 	bl	8002cd6 <xQueueGenericCreate>
 800278e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00c      	beq.n	80027b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e001      	b.n	80027a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80027a8:	6979      	ldr	r1, [r7, #20]
 80027aa:	69f8      	ldr	r0, [r7, #28]
 80027ac:	f001 fa08 	bl	8003bc0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80027b0:	69fb      	ldr	r3, [r7, #28]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027d4:	f3ef 8305 	mrs	r3, IPSR
 80027d8:	617b      	str	r3, [r7, #20]
  return(result);
 80027da:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d028      	beq.n	8002832 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <osMessageQueuePut+0x36>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <osMessageQueuePut+0x36>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80027f2:	f06f 0303 	mvn.w	r3, #3
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	e038      	b.n	800286c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80027fe:	f107 0210 	add.w	r2, r7, #16
 8002802:	2300      	movs	r3, #0
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	69b8      	ldr	r0, [r7, #24]
 8002808:	f000 fcec 	bl	80031e4 <xQueueGenericSendFromISR>
 800280c:	4603      	mov	r3, r0
 800280e:	2b01      	cmp	r3, #1
 8002810:	d003      	beq.n	800281a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002812:	f06f 0302 	mvn.w	r3, #2
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	e028      	b.n	800286c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d025      	beq.n	800286c <osMessageQueuePut+0xb0>
 8002820:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <osMessageQueuePut+0xbc>)
 8002822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	e01c      	b.n	800286c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <osMessageQueuePut+0x82>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800283e:	f06f 0303 	mvn.w	r3, #3
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	e012      	b.n	800286c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002846:	2300      	movs	r3, #0
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	69b8      	ldr	r0, [r7, #24]
 800284e:	f000 fbc7 	bl	8002fe0 <xQueueGenericSend>
 8002852:	4603      	mov	r3, r0
 8002854:	2b01      	cmp	r3, #1
 8002856:	d009      	beq.n	800286c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800285e:	f06f 0301 	mvn.w	r3, #1
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	e002      	b.n	800286c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002866:	f06f 0302 	mvn.w	r3, #2
 800286a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800286c:	69fb      	ldr	r3, [r7, #28]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000ed04 	.word	0xe000ed04

0800287c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002892:	f3ef 8305 	mrs	r3, IPSR
 8002896:	617b      	str	r3, [r7, #20]
  return(result);
 8002898:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800289a:	2b00      	cmp	r3, #0
 800289c:	d028      	beq.n	80028f0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <osMessageQueueGet+0x34>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <osMessageQueueGet+0x34>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80028b0:	f06f 0303 	mvn.w	r3, #3
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	e037      	b.n	8002928 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	461a      	mov	r2, r3
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	69b8      	ldr	r0, [r7, #24]
 80028c6:	f000 ffad 	bl	8003824 <xQueueReceiveFromISR>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d003      	beq.n	80028d8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80028d0:	f06f 0302 	mvn.w	r3, #2
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	e027      	b.n	8002928 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d024      	beq.n	8002928 <osMessageQueueGet+0xac>
 80028de:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <osMessageQueueGet+0xb8>)
 80028e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	e01b      	b.n	8002928 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <osMessageQueueGet+0x80>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d103      	bne.n	8002904 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80028fc:	f06f 0303 	mvn.w	r3, #3
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e011      	b.n	8002928 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	69b8      	ldr	r0, [r7, #24]
 800290a:	f000 fd99 	bl	8003440 <xQueueReceive>
 800290e:	4603      	mov	r3, r0
 8002910:	2b01      	cmp	r3, #1
 8002912:	d009      	beq.n	8002928 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800291a:	f06f 0301 	mvn.w	r3, #1
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	e002      	b.n	8002928 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002922:	f06f 0302 	mvn.w	r3, #2
 8002926:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002928:	69fb      	ldr	r3, [r7, #28]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3720      	adds	r7, #32
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	e000ed04 	.word	0xe000ed04

08002938 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <vApplicationGetIdleTaskMemory+0x2c>)
 8002948:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4a06      	ldr	r2, [pc, #24]	@ (8002968 <vApplicationGetIdleTaskMemory+0x30>)
 800294e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2280      	movs	r2, #128	@ 0x80
 8002954:	601a      	str	r2, [r3, #0]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2000005c 	.word	0x2000005c
 8002968:	200000b8 	.word	0x200000b8

0800296c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a07      	ldr	r2, [pc, #28]	@ (8002998 <vApplicationGetTimerTaskMemory+0x2c>)
 800297c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4a06      	ldr	r2, [pc, #24]	@ (800299c <vApplicationGetTimerTaskMemory+0x30>)
 8002982:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800298a:	601a      	str	r2, [r3, #0]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	200002b8 	.word	0x200002b8
 800299c:	20000314 	.word	0x20000314

080029a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f103 0208 	add.w	r2, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295
 80029b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f103 0208 	add.w	r2, r3, #8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f103 0208 	add.w	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d103      	bne.n	8002a62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e00c      	b.n	8002a7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3308      	adds	r3, #8
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e002      	b.n	8002a70 <vListInsert+0x2e>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d2f6      	bcs.n	8002a6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	601a      	str	r2, [r3, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6892      	ldr	r2, [r2, #8]
 8002aca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6852      	ldr	r2, [r2, #4]
 8002ad4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d103      	bne.n	8002ae8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	1e5a      	subs	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b34:	f002 fe48 	bl	80057c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b40:	68f9      	ldr	r1, [r7, #12]
 8002b42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	441a      	add	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b64:	3b01      	subs	r3, #1
 8002b66:	68f9      	ldr	r1, [r7, #12]
 8002b68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	441a      	add	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	22ff      	movs	r2, #255	@ 0xff
 8002b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	22ff      	movs	r2, #255	@ 0xff
 8002b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d114      	bne.n	8002bb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01a      	beq.n	8002bc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3310      	adds	r3, #16
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 fd16 	bl	80045c8 <xTaskRemoveFromEventList>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d012      	beq.n	8002bc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <xQueueGenericReset+0xd0>)
 8002ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	e009      	b.n	8002bc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3310      	adds	r3, #16
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fef1 	bl	80029a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3324      	adds	r3, #36	@ 0x24
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff feec 	bl	80029a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bc8:	f002 fe30 	bl	800582c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bcc:	2301      	movs	r3, #1
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000ed04 	.word	0xe000ed04

08002bdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08e      	sub	sp, #56	@ 0x38
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	e7fd      	b.n	8002c22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <xQueueGenericCreateStatic+0x56>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <xQueueGenericCreateStatic+0x5a>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <xQueueGenericCreateStatic+0x5c>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	623b      	str	r3, [r7, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
 8002c52:	e7fd      	b.n	8002c50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <xQueueGenericCreateStatic+0x84>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <xQueueGenericCreateStatic+0x88>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <xQueueGenericCreateStatic+0x8a>
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10b      	bne.n	8002c82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	61fb      	str	r3, [r7, #28]
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	e7fd      	b.n	8002c7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c82:	2350      	movs	r3, #80	@ 0x50
 8002c84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b50      	cmp	r3, #80	@ 0x50
 8002c8a:	d00b      	beq.n	8002ca4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	61bb      	str	r3, [r7, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ca4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f840 	bl	8002d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3730      	adds	r7, #48	@ 0x30
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b08a      	sub	sp, #40	@ 0x28
 8002cda:	af02      	add	r7, sp, #8
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	613b      	str	r3, [r7, #16]
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	e7fd      	b.n	8002cfe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3350      	adds	r3, #80	@ 0x50
 8002d10:	4618      	mov	r0, r3
 8002d12:	f002 fe7b 	bl	8005a0c <pvPortMalloc>
 8002d16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d011      	beq.n	8002d42 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	3350      	adds	r3, #80	@ 0x50
 8002d26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d30:	79fa      	ldrb	r2, [r7, #7]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f805 	bl	8002d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d42:	69bb      	ldr	r3, [r7, #24]
	}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e002      	b.n	8002d6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	69b8      	ldr	r0, [r7, #24]
 8002d7e:	f7ff fec3 	bl	8002b08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00e      	beq.n	8002dbe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002db2:	2300      	movs	r3, #0
 8002db4:	2200      	movs	r2, #0
 8002db6:	2100      	movs	r1, #0
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f911 	bl	8002fe0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	6939      	ldr	r1, [r7, #16]
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f7ff ff79 	bl	8002cd6 <xQueueGenericCreate>
 8002de4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff ffd3 	bl	8002d92 <prvInitialiseMutex>

		return xNewQueue;
 8002dec:	68fb      	ldr	r3, [r7, #12]
	}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b088      	sub	sp, #32
 8002dfa:	af02      	add	r7, sp, #8
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	6039      	str	r1, [r7, #0]
 8002e00:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002e02:	2301      	movs	r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2200      	movs	r2, #0
 8002e12:	6939      	ldr	r1, [r7, #16]
 8002e14:	6978      	ldr	r0, [r7, #20]
 8002e16:	f7ff fee1 	bl	8002bdc <xQueueGenericCreateStatic>
 8002e1a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff ffb8 	bl	8002d92 <prvInitialiseMutex>

		return xNewQueue;
 8002e22:	68fb      	ldr	r3, [r7, #12]
	}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10b      	bne.n	8002e56 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8002e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	60fb      	str	r3, [r7, #12]
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	e7fd      	b.n	8002e52 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	689c      	ldr	r4, [r3, #8]
 8002e5a:	f001 fd75 	bl	8004948 <xTaskGetCurrentTaskHandle>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	429c      	cmp	r4, r3
 8002e62:	d111      	bne.n	8002e88 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002e76:	2300      	movs	r3, #0
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	6938      	ldr	r0, [r7, #16]
 8002e7e:	f000 f8af 	bl	8002fe0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002e82:	2301      	movs	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e001      	b.n	8002e8c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002e8c:	697b      	ldr	r3, [r7, #20]
	}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd90      	pop	{r4, r7, pc}

08002e96 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002e96:	b590      	push	{r4, r7, lr}
 8002e98:	b087      	sub	sp, #28
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	60fb      	str	r3, [r7, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	e7fd      	b.n	8002ebe <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	689c      	ldr	r4, [r3, #8]
 8002ec6:	f001 fd3f 	bl	8004948 <xTaskGetCurrentTaskHandle>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	d107      	bne.n	8002ee0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002eda:	2301      	movs	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e00c      	b.n	8002efa <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002ee0:	6839      	ldr	r1, [r7, #0]
 8002ee2:	6938      	ldr	r0, [r7, #16]
 8002ee4:	f000 fb8e 	bl	8003604 <xQueueSemaphoreTake>
 8002ee8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002efa:	697b      	ldr	r3, [r7, #20]
	}
 8002efc:	4618      	mov	r0, r3
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd90      	pop	{r4, r7, pc}

08002f04 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	@ 0x28
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10b      	bne.n	8002f2e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	61bb      	str	r3, [r7, #24]
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	e7fd      	b.n	8002f2a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d90b      	bls.n	8002f4e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	617b      	str	r3, [r7, #20]
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	e7fd      	b.n	8002f4a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002f4e:	2302      	movs	r3, #2
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	2100      	movs	r1, #0
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff fe3f 	bl	8002bdc <xQueueGenericCreateStatic>
 8002f5e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
	}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	613b      	str	r3, [r7, #16]
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	e7fd      	b.n	8002f9a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d90b      	bls.n	8002fbe <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	60fb      	str	r3, [r7, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	e7fd      	b.n	8002fba <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fe87 	bl	8002cd6 <xQueueGenericCreate>
 8002fc8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002fd6:	697b      	ldr	r3, [r7, #20]
	}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08e      	sub	sp, #56	@ 0x38
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <xQueueGenericSend+0x34>
	__asm volatile
 8002ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <xQueueGenericSend+0x42>
 800301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <xQueueGenericSend+0x46>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <xQueueGenericSend+0x48>
 8003026:	2300      	movs	r3, #0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <xQueueGenericSend+0x64>
	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	e7fd      	b.n	8003040 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d103      	bne.n	8003052 <xQueueGenericSend+0x72>
 800304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <xQueueGenericSend+0x76>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <xQueueGenericSend+0x78>
 8003056:	2300      	movs	r3, #0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10b      	bne.n	8003074 <xQueueGenericSend+0x94>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	623b      	str	r3, [r7, #32]
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003074:	f001 fc78 	bl	8004968 <xTaskGetSchedulerState>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <xQueueGenericSend+0xa4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <xQueueGenericSend+0xa8>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <xQueueGenericSend+0xaa>
 8003088:	2300      	movs	r3, #0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10b      	bne.n	80030a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	61fb      	str	r3, [r7, #28]
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	e7fd      	b.n	80030a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030a6:	f002 fb8f 	bl	80057c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d302      	bcc.n	80030bc <xQueueGenericSend+0xdc>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d129      	bne.n	8003110 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030c2:	f000 fc6d 	bl	80039a0 <prvCopyDataToQueue>
 80030c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d010      	beq.n	80030f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	3324      	adds	r3, #36	@ 0x24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f001 fa77 	bl	80045c8 <xTaskRemoveFromEventList>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030e0:	4b3f      	ldr	r3, [pc, #252]	@ (80031e0 <xQueueGenericSend+0x200>)
 80030e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	e00a      	b.n	8003108 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030f8:	4b39      	ldr	r3, [pc, #228]	@ (80031e0 <xQueueGenericSend+0x200>)
 80030fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003108:	f002 fb90 	bl	800582c <vPortExitCritical>
				return pdPASS;
 800310c:	2301      	movs	r3, #1
 800310e:	e063      	b.n	80031d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d103      	bne.n	800311e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003116:	f002 fb89 	bl	800582c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800311a:	2300      	movs	r3, #0
 800311c:	e05c      	b.n	80031d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800311e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fab1 	bl	8004690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800312e:	2301      	movs	r3, #1
 8003130:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003132:	f002 fb7b 	bl	800582c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003136:	f001 f80f 	bl	8004158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800313a:	f002 fb45 	bl	80057c8 <vPortEnterCritical>
 800313e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003140:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003144:	b25b      	sxtb	r3, r3
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d103      	bne.n	8003154 <xQueueGenericSend+0x174>
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003156:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800315a:	b25b      	sxtb	r3, r3
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d103      	bne.n	800316a <xQueueGenericSend+0x18a>
 8003162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800316a:	f002 fb5f 	bl	800582c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800316e:	1d3a      	adds	r2, r7, #4
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f001 faa0 	bl	80046bc <xTaskCheckForTimeOut>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d124      	bne.n	80031cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003182:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003184:	f000 fd04 	bl	8003b90 <prvIsQueueFull>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d018      	beq.n	80031c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800318e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003190:	3310      	adds	r3, #16
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f001 f9c4 	bl	8004524 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800319c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800319e:	f000 fc8f 	bl	8003ac0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031a2:	f000 ffe7 	bl	8004174 <xTaskResumeAll>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f47f af7c 	bne.w	80030a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80031ae:	4b0c      	ldr	r3, [pc, #48]	@ (80031e0 <xQueueGenericSend+0x200>)
 80031b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	e772      	b.n	80030a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031c2:	f000 fc7d 	bl	8003ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031c6:	f000 ffd5 	bl	8004174 <xTaskResumeAll>
 80031ca:	e76c      	b.n	80030a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031ce:	f000 fc77 	bl	8003ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031d2:	f000 ffcf 	bl	8004174 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3738      	adds	r7, #56	@ 0x38
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	e000ed04 	.word	0xe000ed04

080031e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b090      	sub	sp, #64	@ 0x40
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80031f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10b      	bne.n	8003214 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800320e:	bf00      	nop
 8003210:	bf00      	nop
 8003212:	e7fd      	b.n	8003210 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d103      	bne.n	8003222 <xQueueGenericSendFromISR+0x3e>
 800321a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <xQueueGenericSendFromISR+0x42>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <xQueueGenericSendFromISR+0x44>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d103      	bne.n	8003252 <xQueueGenericSendFromISR+0x6e>
 800324a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <xQueueGenericSendFromISR+0x72>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <xQueueGenericSendFromISR+0x74>
 8003256:	2300      	movs	r3, #0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10b      	bne.n	8003274 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	623b      	str	r3, [r7, #32]
}
 800326e:	bf00      	nop
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003274:	f002 fb88 	bl	8005988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003278:	f3ef 8211 	mrs	r2, BASEPRI
 800327c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	61fa      	str	r2, [r7, #28]
 800328e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003290:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003292:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003296:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329c:	429a      	cmp	r2, r3
 800329e:	d302      	bcc.n	80032a6 <xQueueGenericSendFromISR+0xc2>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d12f      	bne.n	8003306 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032bc:	f000 fb70 	bl	80039a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d112      	bne.n	80032f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d4:	3324      	adds	r3, #36	@ 0x24
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 f976 	bl	80045c8 <xTaskRemoveFromEventList>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00e      	beq.n	8003300 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	e007      	b.n	8003300 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032f4:	3301      	adds	r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	b25a      	sxtb	r2, r3
 80032fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003300:	2301      	movs	r3, #1
 8003302:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003304:	e001      	b.n	800330a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003306:	2300      	movs	r3, #0
 8003308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800330a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003314:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003318:	4618      	mov	r0, r3
 800331a:	3740      	adds	r7, #64	@ 0x40
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08e      	sub	sp, #56	@ 0x38
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800332e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	623b      	str	r3, [r7, #32]
}
 8003346:	bf00      	nop
 8003348:	bf00      	nop
 800334a:	e7fd      	b.n	8003348 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00b      	beq.n	800336c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	61fb      	str	r3, [r7, #28]
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800336c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d103      	bne.n	800337c <xQueueGiveFromISR+0x5c>
 8003374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <xQueueGiveFromISR+0x60>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <xQueueGiveFromISR+0x62>
 8003380:	2300      	movs	r3, #0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	61bb      	str	r3, [r7, #24]
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	e7fd      	b.n	800339a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800339e:	f002 faf3 	bl	8005988 <vPortValidateInterruptPriority>
	__asm volatile
 80033a2:	f3ef 8211 	mrs	r2, BASEPRI
 80033a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	617a      	str	r2, [r7, #20]
 80033b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80033ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d22b      	bcs.n	8003426 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80033e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d112      	bne.n	8003410 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d016      	beq.n	8003420 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f4:	3324      	adds	r3, #36	@ 0x24
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 f8e6 	bl	80045c8 <xTaskRemoveFromEventList>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00e      	beq.n	8003420 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00b      	beq.n	8003420 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e007      	b.n	8003420 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003414:	3301      	adds	r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	b25a      	sxtb	r2, r3
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003420:	2301      	movs	r3, #1
 8003422:	637b      	str	r3, [r7, #52]	@ 0x34
 8003424:	e001      	b.n	800342a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003426:	2300      	movs	r3, #0
 8003428:	637b      	str	r3, [r7, #52]	@ 0x34
 800342a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f383 8811 	msr	BASEPRI, r3
}
 8003434:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003438:	4618      	mov	r0, r3
 800343a:	3738      	adds	r7, #56	@ 0x38
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08c      	sub	sp, #48	@ 0x30
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800344c:	2300      	movs	r3, #0
 800344e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10b      	bne.n	8003472 <xQueueReceive+0x32>
	__asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	623b      	str	r3, [r7, #32]
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	e7fd      	b.n	800346e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d103      	bne.n	8003480 <xQueueReceive+0x40>
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <xQueueReceive+0x44>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <xQueueReceive+0x46>
 8003484:	2300      	movs	r3, #0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10b      	bne.n	80034a2 <xQueueReceive+0x62>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	61fb      	str	r3, [r7, #28]
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	e7fd      	b.n	800349e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034a2:	f001 fa61 	bl	8004968 <xTaskGetSchedulerState>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <xQueueReceive+0x72>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <xQueueReceive+0x76>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <xQueueReceive+0x78>
 80034b6:	2300      	movs	r3, #0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <xQueueReceive+0x94>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	61bb      	str	r3, [r7, #24]
}
 80034ce:	bf00      	nop
 80034d0:	bf00      	nop
 80034d2:	e7fd      	b.n	80034d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034d4:	f002 f978 	bl	80057c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01f      	beq.n	8003524 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034e8:	f000 fac4 	bl	8003a74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	1e5a      	subs	r2, r3, #1
 80034f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00f      	beq.n	800351c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fe:	3310      	adds	r3, #16
 8003500:	4618      	mov	r0, r3
 8003502:	f001 f861 	bl	80045c8 <xTaskRemoveFromEventList>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800350c:	4b3c      	ldr	r3, [pc, #240]	@ (8003600 <xQueueReceive+0x1c0>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800351c:	f002 f986 	bl	800582c <vPortExitCritical>
				return pdPASS;
 8003520:	2301      	movs	r3, #1
 8003522:	e069      	b.n	80035f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800352a:	f002 f97f 	bl	800582c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800352e:	2300      	movs	r3, #0
 8003530:	e062      	b.n	80035f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	4618      	mov	r0, r3
 800353e:	f001 f8a7 	bl	8004690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003542:	2301      	movs	r3, #1
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003546:	f002 f971 	bl	800582c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800354a:	f000 fe05 	bl	8004158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800354e:	f002 f93b 	bl	80057c8 <vPortEnterCritical>
 8003552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003558:	b25b      	sxtb	r3, r3
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355e:	d103      	bne.n	8003568 <xQueueReceive+0x128>
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800356e:	b25b      	sxtb	r3, r3
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d103      	bne.n	800357e <xQueueReceive+0x13e>
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800357e:	f002 f955 	bl	800582c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003582:	1d3a      	adds	r2, r7, #4
 8003584:	f107 0310 	add.w	r3, r7, #16
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f001 f896 	bl	80046bc <xTaskCheckForTimeOut>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d123      	bne.n	80035de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003598:	f000 fae4 	bl	8003b64 <prvIsQueueEmpty>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d017      	beq.n	80035d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a4:	3324      	adds	r3, #36	@ 0x24
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 ffba 	bl	8004524 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035b2:	f000 fa85 	bl	8003ac0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035b6:	f000 fddd 	bl	8004174 <xTaskResumeAll>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d189      	bne.n	80034d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80035c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003600 <xQueueReceive+0x1c0>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	e780      	b.n	80034d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035d4:	f000 fa74 	bl	8003ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035d8:	f000 fdcc 	bl	8004174 <xTaskResumeAll>
 80035dc:	e77a      	b.n	80034d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80035de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035e0:	f000 fa6e 	bl	8003ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035e4:	f000 fdc6 	bl	8004174 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035ea:	f000 fabb 	bl	8003b64 <prvIsQueueEmpty>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f43f af6f 	beq.w	80034d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3730      	adds	r7, #48	@ 0x30
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	e000ed04 	.word	0xe000ed04

08003604 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08e      	sub	sp, #56	@ 0x38
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800360e:	2300      	movs	r3, #0
 8003610:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003616:	2300      	movs	r3, #0
 8003618:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800361a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	623b      	str	r3, [r7, #32]
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	61fb      	str	r3, [r7, #28]
}
 8003652:	bf00      	nop
 8003654:	bf00      	nop
 8003656:	e7fd      	b.n	8003654 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003658:	f001 f986 	bl	8004968 <xTaskGetSchedulerState>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <xQueueSemaphoreTake+0x64>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <xQueueSemaphoreTake+0x68>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <xQueueSemaphoreTake+0x6a>
 800366c:	2300      	movs	r3, #0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10b      	bne.n	800368a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	61bb      	str	r3, [r7, #24]
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	e7fd      	b.n	8003686 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800368a:	f002 f89d 	bl	80057c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003692:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d024      	beq.n	80036e4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	1e5a      	subs	r2, r3, #1
 800369e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80036aa:	f001 fad7 	bl	8004c5c <pvTaskIncrementMutexHeldCount>
 80036ae:	4602      	mov	r2, r0
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00f      	beq.n	80036dc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036be:	3310      	adds	r3, #16
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 ff81 	bl	80045c8 <xTaskRemoveFromEventList>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80036cc:	4b54      	ldr	r3, [pc, #336]	@ (8003820 <xQueueSemaphoreTake+0x21c>)
 80036ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80036dc:	f002 f8a6 	bl	800582c <vPortExitCritical>
				return pdPASS;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e098      	b.n	8003816 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d112      	bne.n	8003710 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80036ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00b      	beq.n	8003708 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	617b      	str	r3, [r7, #20]
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003708:	f002 f890 	bl	800582c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800370c:	2300      	movs	r3, #0
 800370e:	e082      	b.n	8003816 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003716:	f107 030c 	add.w	r3, r7, #12
 800371a:	4618      	mov	r0, r3
 800371c:	f000 ffb8 	bl	8004690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003720:	2301      	movs	r3, #1
 8003722:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003724:	f002 f882 	bl	800582c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003728:	f000 fd16 	bl	8004158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800372c:	f002 f84c 	bl	80057c8 <vPortEnterCritical>
 8003730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003732:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003736:	b25b      	sxtb	r3, r3
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d103      	bne.n	8003746 <xQueueSemaphoreTake+0x142>
 800373e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003748:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800374c:	b25b      	sxtb	r3, r3
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d103      	bne.n	800375c <xQueueSemaphoreTake+0x158>
 8003754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800375c:	f002 f866 	bl	800582c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003760:	463a      	mov	r2, r7
 8003762:	f107 030c 	add.w	r3, r7, #12
 8003766:	4611      	mov	r1, r2
 8003768:	4618      	mov	r0, r3
 800376a:	f000 ffa7 	bl	80046bc <xTaskCheckForTimeOut>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d132      	bne.n	80037da <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003774:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003776:	f000 f9f5 	bl	8003b64 <prvIsQueueEmpty>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d026      	beq.n	80037ce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003788:	f002 f81e 	bl	80057c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800378c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4618      	mov	r0, r3
 8003792:	f001 f907 	bl	80049a4 <xTaskPriorityInherit>
 8003796:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003798:	f002 f848 	bl	800582c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379e:	3324      	adds	r3, #36	@ 0x24
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 febd 	bl	8004524 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037ac:	f000 f988 	bl	8003ac0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037b0:	f000 fce0 	bl	8004174 <xTaskResumeAll>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f47f af67 	bne.w	800368a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80037bc:	4b18      	ldr	r3, [pc, #96]	@ (8003820 <xQueueSemaphoreTake+0x21c>)
 80037be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	e75d      	b.n	800368a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80037ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037d0:	f000 f976 	bl	8003ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037d4:	f000 fcce 	bl	8004174 <xTaskResumeAll>
 80037d8:	e757      	b.n	800368a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80037da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037dc:	f000 f970 	bl	8003ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037e0:	f000 fcc8 	bl	8004174 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037e6:	f000 f9bd 	bl	8003b64 <prvIsQueueEmpty>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f43f af4c 	beq.w	800368a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00d      	beq.n	8003814 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80037f8:	f001 ffe6 	bl	80057c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80037fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037fe:	f000 f8b7 	bl	8003970 <prvGetDisinheritPriorityAfterTimeout>
 8003802:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800380a:	4618      	mov	r0, r3
 800380c:	f001 f9a2 	bl	8004b54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003810:	f002 f80c 	bl	800582c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003814:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003816:	4618      	mov	r0, r3
 8003818:	3738      	adds	r7, #56	@ 0x38
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	e000ed04 	.word	0xe000ed04

08003824 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08e      	sub	sp, #56	@ 0x38
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10b      	bne.n	8003852 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	623b      	str	r3, [r7, #32]
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	e7fd      	b.n	800384e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <xQueueReceiveFromISR+0x3c>
 8003858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <xQueueReceiveFromISR+0x40>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <xQueueReceiveFromISR+0x42>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10b      	bne.n	8003882 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	61fb      	str	r3, [r7, #28]
}
 800387c:	bf00      	nop
 800387e:	bf00      	nop
 8003880:	e7fd      	b.n	800387e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003882:	f002 f881 	bl	8005988 <vPortValidateInterruptPriority>
	__asm volatile
 8003886:	f3ef 8211 	mrs	r2, BASEPRI
 800388a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	61ba      	str	r2, [r7, #24]
 800389c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800389e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d02f      	beq.n	800390e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038bc:	f000 f8da 	bl	8003a74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c2:	1e5a      	subs	r2, r3, #1
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80038c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d112      	bne.n	80038f8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038dc:	3310      	adds	r3, #16
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fe72 	bl	80045c8 <xTaskRemoveFromEventList>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00e      	beq.n	8003908 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00b      	beq.n	8003908 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e007      	b.n	8003908 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80038f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038fc:	3301      	adds	r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	b25a      	sxtb	r2, r3
 8003902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003908:	2301      	movs	r3, #1
 800390a:	637b      	str	r3, [r7, #52]	@ 0x34
 800390c:	e001      	b.n	8003912 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800390e:	2300      	movs	r3, #0
 8003910:	637b      	str	r3, [r7, #52]	@ 0x34
 8003912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003914:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f383 8811 	msr	BASEPRI, r3
}
 800391c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800391e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003920:	4618      	mov	r0, r3
 8003922:	3738      	adds	r7, #56	@ 0x38
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10b      	bne.n	8003952 <vQueueDelete+0x2a>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	60bb      	str	r3, [r7, #8]
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	e7fd      	b.n	800394e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f95e 	bl	8003c14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f002 f920 	bl	8005ba8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e001      	b.n	8003992 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003992:	68fb      	ldr	r3, [r7, #12]
	}
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d14d      	bne.n	8003a62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 f852 	bl	8004a74 <xTaskPriorityDisinherit>
 80039d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	e043      	b.n	8003a62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d119      	bne.n	8003a14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6858      	ldr	r0, [r3, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	461a      	mov	r2, r3
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	f002 fa28 	bl	8005e40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	441a      	add	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d32b      	bcc.n	8003a62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	e026      	b.n	8003a62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68d8      	ldr	r0, [r3, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	f002 fa0e 	bl	8005e40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	425b      	negs	r3, r3
 8003a2e:	441a      	add	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d207      	bcs.n	8003a50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	425b      	negs	r3, r3
 8003a4a:	441a      	add	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d105      	bne.n	8003a62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003a6a:	697b      	ldr	r3, [r7, #20]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d018      	beq.n	8003ab8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	441a      	add	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d303      	bcc.n	8003aa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68d9      	ldr	r1, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6838      	ldr	r0, [r7, #0]
 8003ab4:	f002 f9c4 	bl	8005e40 <memcpy>
	}
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ac8:	f001 fe7e 	bl	80057c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ad2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ad4:	e011      	b.n	8003afa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d012      	beq.n	8003b04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3324      	adds	r3, #36	@ 0x24
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fd70 	bl	80045c8 <xTaskRemoveFromEventList>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003aee:	f000 fe49 	bl	8004784 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	dce9      	bgt.n	8003ad6 <prvUnlockQueue+0x16>
 8003b02:	e000      	b.n	8003b06 <prvUnlockQueue+0x46>
					break;
 8003b04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	22ff      	movs	r2, #255	@ 0xff
 8003b0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003b0e:	f001 fe8d 	bl	800582c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b12:	f001 fe59 	bl	80057c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b1e:	e011      	b.n	8003b44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d012      	beq.n	8003b4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3310      	adds	r3, #16
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fd4b 	bl	80045c8 <xTaskRemoveFromEventList>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b38:	f000 fe24 	bl	8004784 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b3c:	7bbb      	ldrb	r3, [r7, #14]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	dce9      	bgt.n	8003b20 <prvUnlockQueue+0x60>
 8003b4c:	e000      	b.n	8003b50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	22ff      	movs	r2, #255	@ 0xff
 8003b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003b58:	f001 fe68 	bl	800582c <vPortExitCritical>
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b6c:	f001 fe2c 	bl	80057c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e001      	b.n	8003b82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b82:	f001 fe53 	bl	800582c <vPortExitCritical>

	return xReturn;
 8003b86:	68fb      	ldr	r3, [r7, #12]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b98:	f001 fe16 	bl	80057c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d102      	bne.n	8003bae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e001      	b.n	8003bb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bb2:	f001 fe3b 	bl	800582c <vPortExitCritical>

	return xReturn;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	e014      	b.n	8003bfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003bd0:	4a0f      	ldr	r2, [pc, #60]	@ (8003c10 <vQueueAddToRegistry+0x50>)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003bdc:	490c      	ldr	r1, [pc, #48]	@ (8003c10 <vQueueAddToRegistry+0x50>)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003be6:	4a0a      	ldr	r2, [pc, #40]	@ (8003c10 <vQueueAddToRegistry+0x50>)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4413      	add	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003bf2:	e006      	b.n	8003c02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b07      	cmp	r3, #7
 8003bfe:	d9e7      	bls.n	8003bd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c00:	bf00      	nop
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000714 	.word	0x20000714

08003c14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e016      	b.n	8003c50 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003c22:	4a10      	ldr	r2, [pc, #64]	@ (8003c64 <vQueueUnregisterQueue+0x50>)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d10b      	bne.n	8003c4a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003c32:	4a0c      	ldr	r2, [pc, #48]	@ (8003c64 <vQueueUnregisterQueue+0x50>)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2100      	movs	r1, #0
 8003c38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003c3c:	4a09      	ldr	r2, [pc, #36]	@ (8003c64 <vQueueUnregisterQueue+0x50>)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	2200      	movs	r2, #0
 8003c46:	605a      	str	r2, [r3, #4]
				break;
 8003c48:	e006      	b.n	8003c58 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b07      	cmp	r3, #7
 8003c54:	d9e5      	bls.n	8003c22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003c56:	bf00      	nop
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	20000714 	.word	0x20000714

08003c68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c78:	f001 fda6 	bl	80057c8 <vPortEnterCritical>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d103      	bne.n	8003c92 <vQueueWaitForMessageRestricted+0x2a>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c98:	b25b      	sxtb	r3, r3
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d103      	bne.n	8003ca8 <vQueueWaitForMessageRestricted+0x40>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ca8:	f001 fdc0 	bl	800582c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3324      	adds	r3, #36	@ 0x24
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fc57 	bl	8004570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff fefc 	bl	8003ac0 <prvUnlockQueue>
	}
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08e      	sub	sp, #56	@ 0x38
 8003cd4:	af04      	add	r7, sp, #16
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <xTaskCreateStatic+0x2c>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10b      	bne.n	8003d1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	61fb      	str	r3, [r7, #28]
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	e7fd      	b.n	8003d16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d1a:	235c      	movs	r3, #92	@ 0x5c
 8003d1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b5c      	cmp	r3, #92	@ 0x5c
 8003d22:	d00b      	beq.n	8003d3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	61bb      	str	r3, [r7, #24]
}
 8003d36:	bf00      	nop
 8003d38:	bf00      	nop
 8003d3a:	e7fd      	b.n	8003d38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01e      	beq.n	8003d82 <xTaskCreateStatic+0xb2>
 8003d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01b      	beq.n	8003d82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9303      	str	r3, [sp, #12]
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	9302      	str	r3, [sp, #8]
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f850 	bl	8003e1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d7c:	f000 f8de 	bl	8003f3c <prvAddNewTaskToReadyList>
 8003d80:	e001      	b.n	8003d86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d86:	697b      	ldr	r3, [r7, #20]
	}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3728      	adds	r7, #40	@ 0x28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08c      	sub	sp, #48	@ 0x30
 8003d94:	af04      	add	r7, sp, #16
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f001 fe31 	bl	8005a0c <pvPortMalloc>
 8003daa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00e      	beq.n	8003dd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003db2:	205c      	movs	r0, #92	@ 0x5c
 8003db4:	f001 fe2a 	bl	8005a0c <pvPortMalloc>
 8003db8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dc6:	e005      	b.n	8003dd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dc8:	6978      	ldr	r0, [r7, #20]
 8003dca:	f001 feed 	bl	8005ba8 <vPortFree>
 8003dce:	e001      	b.n	8003dd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d017      	beq.n	8003e0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	2300      	movs	r3, #0
 8003de6:	9303      	str	r3, [sp, #12]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	9302      	str	r3, [sp, #8]
 8003dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f80e 	bl	8003e1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dfe:	69f8      	ldr	r0, [r7, #28]
 8003e00:	f000 f89c 	bl	8003f3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e04:	2301      	movs	r3, #1
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e002      	b.n	8003e10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e10:	69bb      	ldr	r3, [r7, #24]
	}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b088      	sub	sp, #32
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	461a      	mov	r2, r3
 8003e32:	21a5      	movs	r1, #165	@ 0xa5
 8003e34:	f001 ffd8 	bl	8005de8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e42:	3b01      	subs	r3, #1
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f023 0307 	bic.w	r3, r3, #7
 8003e50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00b      	beq.n	8003e74 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	617b      	str	r3, [r7, #20]
}
 8003e6e:	bf00      	nop
 8003e70:	bf00      	nop
 8003e72:	e7fd      	b.n	8003e70 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01f      	beq.n	8003eba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	e012      	b.n	8003ea6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	7819      	ldrb	r1, [r3, #0]
 8003e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3334      	adds	r3, #52	@ 0x34
 8003e90:	460a      	mov	r2, r1
 8003e92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d006      	beq.n	8003eae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2b0f      	cmp	r3, #15
 8003eaa:	d9e9      	bls.n	8003e80 <prvInitialiseNewTask+0x66>
 8003eac:	e000      	b.n	8003eb0 <prvInitialiseNewTask+0x96>
			{
				break;
 8003eae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003eb8:	e003      	b.n	8003ec2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec4:	2b37      	cmp	r3, #55	@ 0x37
 8003ec6:	d901      	bls.n	8003ecc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ec8:	2337      	movs	r3, #55	@ 0x37
 8003eca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ed6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eda:	2200      	movs	r2, #0
 8003edc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fd7c 	bl	80029e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	3318      	adds	r3, #24
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fe fd77 	bl	80029e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f06:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	68f9      	ldr	r1, [r7, #12]
 8003f1a:	69b8      	ldr	r0, [r7, #24]
 8003f1c:	f001 fb20 	bl	8005560 <pxPortInitialiseStack>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f32:	bf00      	nop
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f44:	f001 fc40 	bl	80057c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f48:	4b2d      	ldr	r3, [pc, #180]	@ (8004000 <prvAddNewTaskToReadyList+0xc4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004000 <prvAddNewTaskToReadyList+0xc4>)
 8003f50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f52:	4b2c      	ldr	r3, [pc, #176]	@ (8004004 <prvAddNewTaskToReadyList+0xc8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8004004 <prvAddNewTaskToReadyList+0xc8>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f60:	4b27      	ldr	r3, [pc, #156]	@ (8004000 <prvAddNewTaskToReadyList+0xc4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d110      	bne.n	8003f8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f68:	f000 fc30 	bl	80047cc <prvInitialiseTaskLists>
 8003f6c:	e00d      	b.n	8003f8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f6e:	4b26      	ldr	r3, [pc, #152]	@ (8004008 <prvAddNewTaskToReadyList+0xcc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f76:	4b23      	ldr	r3, [pc, #140]	@ (8004004 <prvAddNewTaskToReadyList+0xc8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d802      	bhi.n	8003f8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f84:	4a1f      	ldr	r2, [pc, #124]	@ (8004004 <prvAddNewTaskToReadyList+0xc8>)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f8a:	4b20      	ldr	r3, [pc, #128]	@ (800400c <prvAddNewTaskToReadyList+0xd0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	4a1e      	ldr	r2, [pc, #120]	@ (800400c <prvAddNewTaskToReadyList+0xd0>)
 8003f92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f94:	4b1d      	ldr	r3, [pc, #116]	@ (800400c <prvAddNewTaskToReadyList+0xd0>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <prvAddNewTaskToReadyList+0xd4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d903      	bls.n	8003fb0 <prvAddNewTaskToReadyList+0x74>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	4a18      	ldr	r2, [pc, #96]	@ (8004010 <prvAddNewTaskToReadyList+0xd4>)
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <prvAddNewTaskToReadyList+0xd8>)
 8003fbe:	441a      	add	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f7fe fd17 	bl	80029fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fcc:	f001 fc2e 	bl	800582c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <prvAddNewTaskToReadyList+0xcc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00e      	beq.n	8003ff6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004004 <prvAddNewTaskToReadyList+0xc8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d207      	bcs.n	8003ff6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <prvAddNewTaskToReadyList+0xdc>)
 8003fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000c28 	.word	0x20000c28
 8004004:	20000754 	.word	0x20000754
 8004008:	20000c34 	.word	0x20000c34
 800400c:	20000c44 	.word	0x20000c44
 8004010:	20000c30 	.word	0x20000c30
 8004014:	20000758 	.word	0x20000758
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d018      	beq.n	8004060 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800402e:	4b14      	ldr	r3, [pc, #80]	@ (8004080 <vTaskDelay+0x64>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <vTaskDelay+0x32>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	60bb      	str	r3, [r7, #8]
}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	e7fd      	b.n	800404a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800404e:	f000 f883 	bl	8004158 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004052:	2100      	movs	r1, #0
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fe15 	bl	8004c84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800405a:	f000 f88b 	bl	8004174 <xTaskResumeAll>
 800405e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d107      	bne.n	8004076 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004066:	4b07      	ldr	r3, [pc, #28]	@ (8004084 <vTaskDelay+0x68>)
 8004068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000c50 	.word	0x20000c50
 8004084:	e000ed04 	.word	0xe000ed04

08004088 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	@ 0x28
 800408c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004096:	463a      	mov	r2, r7
 8004098:	1d39      	adds	r1, r7, #4
 800409a:	f107 0308 	add.w	r3, r7, #8
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fc4a 	bl	8002938 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040a4:	6839      	ldr	r1, [r7, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	9202      	str	r2, [sp, #8]
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	2300      	movs	r3, #0
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	2300      	movs	r3, #0
 80040b4:	460a      	mov	r2, r1
 80040b6:	4922      	ldr	r1, [pc, #136]	@ (8004140 <vTaskStartScheduler+0xb8>)
 80040b8:	4822      	ldr	r0, [pc, #136]	@ (8004144 <vTaskStartScheduler+0xbc>)
 80040ba:	f7ff fe09 	bl	8003cd0 <xTaskCreateStatic>
 80040be:	4603      	mov	r3, r0
 80040c0:	4a21      	ldr	r2, [pc, #132]	@ (8004148 <vTaskStartScheduler+0xc0>)
 80040c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040c4:	4b20      	ldr	r3, [pc, #128]	@ (8004148 <vTaskStartScheduler+0xc0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040cc:	2301      	movs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e001      	b.n	80040d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d102      	bne.n	80040e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80040dc:	f000 fe26 	bl	8004d2c <xTimerCreateTimerTask>
 80040e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d116      	bne.n	8004116 <vTaskStartScheduler+0x8e>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	613b      	str	r3, [r7, #16]
}
 80040fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040fc:	4b13      	ldr	r3, [pc, #76]	@ (800414c <vTaskStartScheduler+0xc4>)
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004102:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004104:	4b12      	ldr	r3, [pc, #72]	@ (8004150 <vTaskStartScheduler+0xc8>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800410a:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <vTaskStartScheduler+0xcc>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004110:	f001 fab6 	bl	8005680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004114:	e00f      	b.n	8004136 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d10b      	bne.n	8004136 <vTaskStartScheduler+0xae>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	60fb      	str	r3, [r7, #12]
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	e7fd      	b.n	8004132 <vTaskStartScheduler+0xaa>
}
 8004136:	bf00      	nop
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	08005ec8 	.word	0x08005ec8
 8004144:	0800479d 	.word	0x0800479d
 8004148:	20000c4c 	.word	0x20000c4c
 800414c:	20000c48 	.word	0x20000c48
 8004150:	20000c34 	.word	0x20000c34
 8004154:	20000c2c 	.word	0x20000c2c

08004158 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800415c:	4b04      	ldr	r3, [pc, #16]	@ (8004170 <vTaskSuspendAll+0x18>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3301      	adds	r3, #1
 8004162:	4a03      	ldr	r2, [pc, #12]	@ (8004170 <vTaskSuspendAll+0x18>)
 8004164:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004166:	bf00      	nop
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	20000c50 	.word	0x20000c50

08004174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004182:	4b42      	ldr	r3, [pc, #264]	@ (800428c <xTaskResumeAll+0x118>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	603b      	str	r3, [r7, #0]
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	e7fd      	b.n	800419e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041a2:	f001 fb11 	bl	80057c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041a6:	4b39      	ldr	r3, [pc, #228]	@ (800428c <xTaskResumeAll+0x118>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	4a37      	ldr	r2, [pc, #220]	@ (800428c <xTaskResumeAll+0x118>)
 80041ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041b0:	4b36      	ldr	r3, [pc, #216]	@ (800428c <xTaskResumeAll+0x118>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d162      	bne.n	800427e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041b8:	4b35      	ldr	r3, [pc, #212]	@ (8004290 <xTaskResumeAll+0x11c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d05e      	beq.n	800427e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041c0:	e02f      	b.n	8004222 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c2:	4b34      	ldr	r3, [pc, #208]	@ (8004294 <xTaskResumeAll+0x120>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3318      	adds	r3, #24
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe fc70 	bl	8002ab4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe fc6b 	bl	8002ab4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004298 <xTaskResumeAll+0x124>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d903      	bls.n	80041f2 <xTaskResumeAll+0x7e>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004298 <xTaskResumeAll+0x124>)
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4a27      	ldr	r2, [pc, #156]	@ (800429c <xTaskResumeAll+0x128>)
 8004200:	441a      	add	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3304      	adds	r3, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f7fe fbf6 	bl	80029fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004212:	4b23      	ldr	r3, [pc, #140]	@ (80042a0 <xTaskResumeAll+0x12c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800421c:	4b21      	ldr	r3, [pc, #132]	@ (80042a4 <xTaskResumeAll+0x130>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004222:	4b1c      	ldr	r3, [pc, #112]	@ (8004294 <xTaskResumeAll+0x120>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1cb      	bne.n	80041c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004230:	f000 fb6a 	bl	8004908 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004234:	4b1c      	ldr	r3, [pc, #112]	@ (80042a8 <xTaskResumeAll+0x134>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d010      	beq.n	8004262 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004240:	f000 f858 	bl	80042f4 <xTaskIncrementTick>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800424a:	4b16      	ldr	r3, [pc, #88]	@ (80042a4 <xTaskResumeAll+0x130>)
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3b01      	subs	r3, #1
 8004254:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f1      	bne.n	8004240 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800425c:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <xTaskResumeAll+0x134>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004262:	4b10      	ldr	r3, [pc, #64]	@ (80042a4 <xTaskResumeAll+0x130>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800426a:	2301      	movs	r3, #1
 800426c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800426e:	4b0f      	ldr	r3, [pc, #60]	@ (80042ac <xTaskResumeAll+0x138>)
 8004270:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800427e:	f001 fad5 	bl	800582c <vPortExitCritical>

	return xAlreadyYielded;
 8004282:	68bb      	ldr	r3, [r7, #8]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000c50 	.word	0x20000c50
 8004290:	20000c28 	.word	0x20000c28
 8004294:	20000be8 	.word	0x20000be8
 8004298:	20000c30 	.word	0x20000c30
 800429c:	20000758 	.word	0x20000758
 80042a0:	20000754 	.word	0x20000754
 80042a4:	20000c3c 	.word	0x20000c3c
 80042a8:	20000c38 	.word	0x20000c38
 80042ac:	e000ed04 	.word	0xe000ed04

080042b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80042b6:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <xTaskGetTickCount+0x1c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80042bc:	687b      	ldr	r3, [r7, #4]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000c2c 	.word	0x20000c2c

080042d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042d6:	f001 fb57 	bl	8005988 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80042de:	4b04      	ldr	r3, [pc, #16]	@ (80042f0 <xTaskGetTickCountFromISR+0x20>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042e4:	683b      	ldr	r3, [r7, #0]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000c2c 	.word	0x20000c2c

080042f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042fe:	4b4f      	ldr	r3, [pc, #316]	@ (800443c <xTaskIncrementTick+0x148>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f040 8090 	bne.w	8004428 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004308:	4b4d      	ldr	r3, [pc, #308]	@ (8004440 <xTaskIncrementTick+0x14c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3301      	adds	r3, #1
 800430e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004310:	4a4b      	ldr	r2, [pc, #300]	@ (8004440 <xTaskIncrementTick+0x14c>)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d121      	bne.n	8004360 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800431c:	4b49      	ldr	r3, [pc, #292]	@ (8004444 <xTaskIncrementTick+0x150>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	603b      	str	r3, [r7, #0]
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <xTaskIncrementTick+0x46>
 800433e:	4b41      	ldr	r3, [pc, #260]	@ (8004444 <xTaskIncrementTick+0x150>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	4b40      	ldr	r3, [pc, #256]	@ (8004448 <xTaskIncrementTick+0x154>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3e      	ldr	r2, [pc, #248]	@ (8004444 <xTaskIncrementTick+0x150>)
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4a3e      	ldr	r2, [pc, #248]	@ (8004448 <xTaskIncrementTick+0x154>)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	4b3e      	ldr	r3, [pc, #248]	@ (800444c <xTaskIncrementTick+0x158>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	4a3c      	ldr	r2, [pc, #240]	@ (800444c <xTaskIncrementTick+0x158>)
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	f000 fad4 	bl	8004908 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004360:	4b3b      	ldr	r3, [pc, #236]	@ (8004450 <xTaskIncrementTick+0x15c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	429a      	cmp	r2, r3
 8004368:	d349      	bcc.n	80043fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800436a:	4b36      	ldr	r3, [pc, #216]	@ (8004444 <xTaskIncrementTick+0x150>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d104      	bne.n	800437e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004374:	4b36      	ldr	r3, [pc, #216]	@ (8004450 <xTaskIncrementTick+0x15c>)
 8004376:	f04f 32ff 	mov.w	r2, #4294967295
 800437a:	601a      	str	r2, [r3, #0]
					break;
 800437c:	e03f      	b.n	80043fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800437e:	4b31      	ldr	r3, [pc, #196]	@ (8004444 <xTaskIncrementTick+0x150>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d203      	bcs.n	800439e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004396:	4a2e      	ldr	r2, [pc, #184]	@ (8004450 <xTaskIncrementTick+0x15c>)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800439c:	e02f      	b.n	80043fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe fb86 	bl	8002ab4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	3318      	adds	r3, #24
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe fb7d 	bl	8002ab4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043be:	4b25      	ldr	r3, [pc, #148]	@ (8004454 <xTaskIncrementTick+0x160>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d903      	bls.n	80043ce <xTaskIncrementTick+0xda>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	4a22      	ldr	r2, [pc, #136]	@ (8004454 <xTaskIncrementTick+0x160>)
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4a1f      	ldr	r2, [pc, #124]	@ (8004458 <xTaskIncrementTick+0x164>)
 80043dc:	441a      	add	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f7fe fb08 	bl	80029fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ee:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <xTaskIncrementTick+0x168>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d3b8      	bcc.n	800436a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80043f8:	2301      	movs	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043fc:	e7b5      	b.n	800436a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043fe:	4b17      	ldr	r3, [pc, #92]	@ (800445c <xTaskIncrementTick+0x168>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004404:	4914      	ldr	r1, [pc, #80]	@ (8004458 <xTaskIncrementTick+0x164>)
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d901      	bls.n	800441a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004416:	2301      	movs	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800441a:	4b11      	ldr	r3, [pc, #68]	@ (8004460 <xTaskIncrementTick+0x16c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004422:	2301      	movs	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	e004      	b.n	8004432 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004428:	4b0e      	ldr	r3, [pc, #56]	@ (8004464 <xTaskIncrementTick+0x170>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	4a0d      	ldr	r2, [pc, #52]	@ (8004464 <xTaskIncrementTick+0x170>)
 8004430:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004432:	697b      	ldr	r3, [r7, #20]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20000c50 	.word	0x20000c50
 8004440:	20000c2c 	.word	0x20000c2c
 8004444:	20000be0 	.word	0x20000be0
 8004448:	20000be4 	.word	0x20000be4
 800444c:	20000c40 	.word	0x20000c40
 8004450:	20000c48 	.word	0x20000c48
 8004454:	20000c30 	.word	0x20000c30
 8004458:	20000758 	.word	0x20000758
 800445c:	20000754 	.word	0x20000754
 8004460:	20000c3c 	.word	0x20000c3c
 8004464:	20000c38 	.word	0x20000c38

08004468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800446e:	4b28      	ldr	r3, [pc, #160]	@ (8004510 <vTaskSwitchContext+0xa8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004476:	4b27      	ldr	r3, [pc, #156]	@ (8004514 <vTaskSwitchContext+0xac>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800447c:	e042      	b.n	8004504 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800447e:	4b25      	ldr	r3, [pc, #148]	@ (8004514 <vTaskSwitchContext+0xac>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004484:	4b24      	ldr	r3, [pc, #144]	@ (8004518 <vTaskSwitchContext+0xb0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	e011      	b.n	80044b0 <vTaskSwitchContext+0x48>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <vTaskSwitchContext+0x42>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	607b      	str	r3, [r7, #4]
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	e7fd      	b.n	80044a6 <vTaskSwitchContext+0x3e>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	491a      	ldr	r1, [pc, #104]	@ (800451c <vTaskSwitchContext+0xb4>)
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0e3      	beq.n	800448c <vTaskSwitchContext+0x24>
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4a13      	ldr	r2, [pc, #76]	@ (800451c <vTaskSwitchContext+0xb4>)
 80044d0:	4413      	add	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	605a      	str	r2, [r3, #4]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	3308      	adds	r3, #8
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d104      	bne.n	80044f4 <vTaskSwitchContext+0x8c>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	4a09      	ldr	r2, [pc, #36]	@ (8004520 <vTaskSwitchContext+0xb8>)
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4a06      	ldr	r2, [pc, #24]	@ (8004518 <vTaskSwitchContext+0xb0>)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6013      	str	r3, [r2, #0]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	20000c50 	.word	0x20000c50
 8004514:	20000c3c 	.word	0x20000c3c
 8004518:	20000c30 	.word	0x20000c30
 800451c:	20000758 	.word	0x20000758
 8004520:	20000754 	.word	0x20000754

08004524 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	60fb      	str	r3, [r7, #12]
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800454c:	4b07      	ldr	r3, [pc, #28]	@ (800456c <vTaskPlaceOnEventList+0x48>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3318      	adds	r3, #24
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fe fa74 	bl	8002a42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800455a:	2101      	movs	r1, #1
 800455c:	6838      	ldr	r0, [r7, #0]
 800455e:	f000 fb91 	bl	8004c84 <prvAddCurrentTaskToDelayedList>
}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000754 	.word	0x20000754

08004570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	617b      	str	r3, [r7, #20]
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	e7fd      	b.n	8004596 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800459a:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3318      	adds	r3, #24
 80045a0:	4619      	mov	r1, r3
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7fe fa29 	bl	80029fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80045ae:	f04f 33ff 	mov.w	r3, #4294967295
 80045b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	68b8      	ldr	r0, [r7, #8]
 80045b8:	f000 fb64 	bl	8004c84 <prvAddCurrentTaskToDelayedList>
	}
 80045bc:	bf00      	nop
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000754 	.word	0x20000754

080045c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10b      	bne.n	80045f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60fb      	str	r3, [r7, #12]
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	e7fd      	b.n	80045f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3318      	adds	r3, #24
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fa5a 	bl	8002ab4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004600:	4b1d      	ldr	r3, [pc, #116]	@ (8004678 <xTaskRemoveFromEventList+0xb0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11d      	bne.n	8004644 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	3304      	adds	r3, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe fa51 	bl	8002ab4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004616:	4b19      	ldr	r3, [pc, #100]	@ (800467c <xTaskRemoveFromEventList+0xb4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d903      	bls.n	8004626 <xTaskRemoveFromEventList+0x5e>
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	4a16      	ldr	r2, [pc, #88]	@ (800467c <xTaskRemoveFromEventList+0xb4>)
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4a13      	ldr	r2, [pc, #76]	@ (8004680 <xTaskRemoveFromEventList+0xb8>)
 8004634:	441a      	add	r2, r3
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3304      	adds	r3, #4
 800463a:	4619      	mov	r1, r3
 800463c:	4610      	mov	r0, r2
 800463e:	f7fe f9dc 	bl	80029fa <vListInsertEnd>
 8004642:	e005      	b.n	8004650 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	3318      	adds	r3, #24
 8004648:	4619      	mov	r1, r3
 800464a:	480e      	ldr	r0, [pc, #56]	@ (8004684 <xTaskRemoveFromEventList+0xbc>)
 800464c:	f7fe f9d5 	bl	80029fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004654:	4b0c      	ldr	r3, [pc, #48]	@ (8004688 <xTaskRemoveFromEventList+0xc0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	429a      	cmp	r2, r3
 800465c:	d905      	bls.n	800466a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800465e:	2301      	movs	r3, #1
 8004660:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004662:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <xTaskRemoveFromEventList+0xc4>)
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	e001      	b.n	800466e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800466e:	697b      	ldr	r3, [r7, #20]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000c50 	.word	0x20000c50
 800467c:	20000c30 	.word	0x20000c30
 8004680:	20000758 	.word	0x20000758
 8004684:	20000be8 	.word	0x20000be8
 8004688:	20000754 	.word	0x20000754
 800468c:	20000c3c 	.word	0x20000c3c

08004690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004698:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <vTaskInternalSetTimeOutState+0x24>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046a0:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <vTaskInternalSetTimeOutState+0x28>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	605a      	str	r2, [r3, #4]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	20000c40 	.word	0x20000c40
 80046b8:	20000c2c 	.word	0x20000c2c

080046bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	613b      	str	r3, [r7, #16]
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	60fb      	str	r3, [r7, #12]
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004702:	f001 f861 	bl	80057c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004706:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <xTaskCheckForTimeOut+0xc0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471e:	d102      	bne.n	8004726 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004720:	2300      	movs	r3, #0
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	e023      	b.n	800476e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <xTaskCheckForTimeOut+0xc4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d007      	beq.n	8004742 <xTaskCheckForTimeOut+0x86>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	429a      	cmp	r2, r3
 800473a:	d302      	bcc.n	8004742 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	e015      	b.n	800476e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	429a      	cmp	r2, r3
 800474a:	d20b      	bcs.n	8004764 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff ff99 	bl	8004690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e004      	b.n	800476e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800476a:	2301      	movs	r3, #1
 800476c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800476e:	f001 f85d 	bl	800582c <vPortExitCritical>

	return xReturn;
 8004772:	69fb      	ldr	r3, [r7, #28]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20000c2c 	.word	0x20000c2c
 8004780:	20000c40 	.word	0x20000c40

08004784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004788:	4b03      	ldr	r3, [pc, #12]	@ (8004798 <vTaskMissedYield+0x14>)
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	20000c3c 	.word	0x20000c3c

0800479c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047a4:	f000 f852 	bl	800484c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047a8:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <prvIdleTask+0x28>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d9f9      	bls.n	80047a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <prvIdleTask+0x2c>)
 80047b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047c0:	e7f0      	b.n	80047a4 <prvIdleTask+0x8>
 80047c2:	bf00      	nop
 80047c4:	20000758 	.word	0x20000758
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	e00c      	b.n	80047f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4a12      	ldr	r2, [pc, #72]	@ (800482c <prvInitialiseTaskLists+0x60>)
 80047e4:	4413      	add	r3, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe f8da 	bl	80029a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3301      	adds	r3, #1
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b37      	cmp	r3, #55	@ 0x37
 80047f6:	d9ef      	bls.n	80047d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047f8:	480d      	ldr	r0, [pc, #52]	@ (8004830 <prvInitialiseTaskLists+0x64>)
 80047fa:	f7fe f8d1 	bl	80029a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047fe:	480d      	ldr	r0, [pc, #52]	@ (8004834 <prvInitialiseTaskLists+0x68>)
 8004800:	f7fe f8ce 	bl	80029a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004804:	480c      	ldr	r0, [pc, #48]	@ (8004838 <prvInitialiseTaskLists+0x6c>)
 8004806:	f7fe f8cb 	bl	80029a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800480a:	480c      	ldr	r0, [pc, #48]	@ (800483c <prvInitialiseTaskLists+0x70>)
 800480c:	f7fe f8c8 	bl	80029a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004810:	480b      	ldr	r0, [pc, #44]	@ (8004840 <prvInitialiseTaskLists+0x74>)
 8004812:	f7fe f8c5 	bl	80029a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004816:	4b0b      	ldr	r3, [pc, #44]	@ (8004844 <prvInitialiseTaskLists+0x78>)
 8004818:	4a05      	ldr	r2, [pc, #20]	@ (8004830 <prvInitialiseTaskLists+0x64>)
 800481a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800481c:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <prvInitialiseTaskLists+0x7c>)
 800481e:	4a05      	ldr	r2, [pc, #20]	@ (8004834 <prvInitialiseTaskLists+0x68>)
 8004820:	601a      	str	r2, [r3, #0]
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000758 	.word	0x20000758
 8004830:	20000bb8 	.word	0x20000bb8
 8004834:	20000bcc 	.word	0x20000bcc
 8004838:	20000be8 	.word	0x20000be8
 800483c:	20000bfc 	.word	0x20000bfc
 8004840:	20000c14 	.word	0x20000c14
 8004844:	20000be0 	.word	0x20000be0
 8004848:	20000be4 	.word	0x20000be4

0800484c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004852:	e019      	b.n	8004888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004854:	f000 ffb8 	bl	80057c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004858:	4b10      	ldr	r3, [pc, #64]	@ (800489c <prvCheckTasksWaitingTermination+0x50>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe f925 	bl	8002ab4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800486a:	4b0d      	ldr	r3, [pc, #52]	@ (80048a0 <prvCheckTasksWaitingTermination+0x54>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3b01      	subs	r3, #1
 8004870:	4a0b      	ldr	r2, [pc, #44]	@ (80048a0 <prvCheckTasksWaitingTermination+0x54>)
 8004872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004874:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <prvCheckTasksWaitingTermination+0x58>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3b01      	subs	r3, #1
 800487a:	4a0a      	ldr	r2, [pc, #40]	@ (80048a4 <prvCheckTasksWaitingTermination+0x58>)
 800487c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800487e:	f000 ffd5 	bl	800582c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f810 	bl	80048a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004888:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <prvCheckTasksWaitingTermination+0x58>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e1      	bne.n	8004854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000bfc 	.word	0x20000bfc
 80048a0:	20000c28 	.word	0x20000c28
 80048a4:	20000c10 	.word	0x20000c10

080048a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d108      	bne.n	80048cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 f972 	bl	8005ba8 <vPortFree>
				vPortFree( pxTCB );
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 f96f 	bl	8005ba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048ca:	e019      	b.n	8004900 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d103      	bne.n	80048de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f001 f966 	bl	8005ba8 <vPortFree>
	}
 80048dc:	e010      	b.n	8004900 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d00b      	beq.n	8004900 <prvDeleteTCB+0x58>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	60fb      	str	r3, [r7, #12]
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <prvDeleteTCB+0x54>
	}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800490e:	4b0c      	ldr	r3, [pc, #48]	@ (8004940 <prvResetNextTaskUnblockTime+0x38>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004918:	4b0a      	ldr	r3, [pc, #40]	@ (8004944 <prvResetNextTaskUnblockTime+0x3c>)
 800491a:	f04f 32ff 	mov.w	r2, #4294967295
 800491e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004920:	e008      	b.n	8004934 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004922:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <prvResetNextTaskUnblockTime+0x38>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a04      	ldr	r2, [pc, #16]	@ (8004944 <prvResetNextTaskUnblockTime+0x3c>)
 8004932:	6013      	str	r3, [r2, #0]
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	20000be0 	.word	0x20000be0
 8004944:	20000c48 	.word	0x20000c48

08004948 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800494e:	4b05      	ldr	r3, [pc, #20]	@ (8004964 <xTaskGetCurrentTaskHandle+0x1c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004954:	687b      	ldr	r3, [r7, #4]
	}
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000754 	.word	0x20000754

08004968 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800496e:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <xTaskGetSchedulerState+0x34>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004976:	2301      	movs	r3, #1
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	e008      	b.n	800498e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800497c:	4b08      	ldr	r3, [pc, #32]	@ (80049a0 <xTaskGetSchedulerState+0x38>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004984:	2302      	movs	r3, #2
 8004986:	607b      	str	r3, [r7, #4]
 8004988:	e001      	b.n	800498e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800498a:	2300      	movs	r3, #0
 800498c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800498e:	687b      	ldr	r3, [r7, #4]
	}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	20000c34 	.word	0x20000c34
 80049a0:	20000c50 	.word	0x20000c50

080049a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d051      	beq.n	8004a5e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049be:	4b2a      	ldr	r3, [pc, #168]	@ (8004a68 <xTaskPriorityInherit+0xc4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d241      	bcs.n	8004a4c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	db06      	blt.n	80049de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049d0:	4b25      	ldr	r3, [pc, #148]	@ (8004a68 <xTaskPriorityInherit+0xc4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	6959      	ldr	r1, [r3, #20]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4a1f      	ldr	r2, [pc, #124]	@ (8004a6c <xTaskPriorityInherit+0xc8>)
 80049f0:	4413      	add	r3, r2
 80049f2:	4299      	cmp	r1, r3
 80049f4:	d122      	bne.n	8004a3c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	3304      	adds	r3, #4
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe f85a 	bl	8002ab4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a00:	4b19      	ldr	r3, [pc, #100]	@ (8004a68 <xTaskPriorityInherit+0xc4>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0e:	4b18      	ldr	r3, [pc, #96]	@ (8004a70 <xTaskPriorityInherit+0xcc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d903      	bls.n	8004a1e <xTaskPriorityInherit+0x7a>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1a:	4a15      	ldr	r2, [pc, #84]	@ (8004a70 <xTaskPriorityInherit+0xcc>)
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4a10      	ldr	r2, [pc, #64]	@ (8004a6c <xTaskPriorityInherit+0xc8>)
 8004a2c:	441a      	add	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	3304      	adds	r3, #4
 8004a32:	4619      	mov	r1, r3
 8004a34:	4610      	mov	r0, r2
 8004a36:	f7fd ffe0 	bl	80029fa <vListInsertEnd>
 8004a3a:	e004      	b.n	8004a46 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <xTaskPriorityInherit+0xc4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004a46:	2301      	movs	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	e008      	b.n	8004a5e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a50:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <xTaskPriorityInherit+0xc4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d201      	bcs.n	8004a5e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
	}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000754 	.word	0x20000754
 8004a6c:	20000758 	.word	0x20000758
 8004a70:	20000c30 	.word	0x20000c30

08004a74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d058      	beq.n	8004b3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b48 <xTaskPriorityDisinherit+0xd4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d00b      	beq.n	8004aac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	60fb      	str	r3, [r7, #12]
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	e7fd      	b.n	8004aa8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60bb      	str	r3, [r7, #8]
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad0:	1e5a      	subs	r2, r3, #1
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d02c      	beq.n	8004b3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d128      	bne.n	8004b3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3304      	adds	r3, #4
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fd ffe0 	bl	8002ab4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b4c <xTaskPriorityDisinherit+0xd8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d903      	bls.n	8004b1c <xTaskPriorityDisinherit+0xa8>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	4a0c      	ldr	r2, [pc, #48]	@ (8004b4c <xTaskPriorityDisinherit+0xd8>)
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4a09      	ldr	r2, [pc, #36]	@ (8004b50 <xTaskPriorityDisinherit+0xdc>)
 8004b2a:	441a      	add	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4619      	mov	r1, r3
 8004b32:	4610      	mov	r0, r2
 8004b34:	f7fd ff61 	bl	80029fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b3c:	697b      	ldr	r3, [r7, #20]
	}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000754 	.word	0x20000754
 8004b4c:	20000c30 	.word	0x20000c30
 8004b50:	20000758 	.word	0x20000758

08004b54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004b62:	2301      	movs	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d06c      	beq.n	8004c46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10b      	bne.n	8004b8c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60fb      	str	r3, [r7, #12]
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d902      	bls.n	8004b9c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e002      	b.n	8004ba2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d04c      	beq.n	8004c46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d147      	bne.n	8004c46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004bb6:	4b26      	ldr	r3, [pc, #152]	@ (8004c50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d10b      	bne.n	8004bd8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60bb      	str	r3, [r7, #8]
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	e7fd      	b.n	8004bd4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bdc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	db04      	blt.n	8004bf6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	6959      	ldr	r1, [r3, #20]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4a13      	ldr	r2, [pc, #76]	@ (8004c54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004c06:	4413      	add	r3, r2
 8004c08:	4299      	cmp	r1, r3
 8004c0a:	d11c      	bne.n	8004c46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd ff4f 	bl	8002ab4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d903      	bls.n	8004c2a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	4a0c      	ldr	r2, [pc, #48]	@ (8004c58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4a07      	ldr	r2, [pc, #28]	@ (8004c54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004c38:	441a      	add	r2, r3
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fd feda 	bl	80029fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c46:	bf00      	nop
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000754 	.word	0x20000754
 8004c54:	20000758 	.word	0x20000758
 8004c58:	20000c30 	.word	0x20000c30

08004c5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004c60:	4b07      	ldr	r3, [pc, #28]	@ (8004c80 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d004      	beq.n	8004c72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004c68:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c6e:	3201      	adds	r2, #1
 8004c70:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004c72:	4b03      	ldr	r3, [pc, #12]	@ (8004c80 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c74:	681b      	ldr	r3, [r3, #0]
	}
 8004c76:	4618      	mov	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	20000754 	.word	0x20000754

08004c84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c8e:	4b21      	ldr	r3, [pc, #132]	@ (8004d14 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c94:	4b20      	ldr	r3, [pc, #128]	@ (8004d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fd ff0a 	bl	8002ab4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca6:	d10a      	bne.n	8004cbe <prvAddCurrentTaskToDelayedList+0x3a>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cae:	4b1a      	ldr	r3, [pc, #104]	@ (8004d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4819      	ldr	r0, [pc, #100]	@ (8004d1c <prvAddCurrentTaskToDelayedList+0x98>)
 8004cb8:	f7fd fe9f 	bl	80029fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cbc:	e026      	b.n	8004d0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cc6:	4b14      	ldr	r3, [pc, #80]	@ (8004d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d209      	bcs.n	8004cea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cd6:	4b12      	ldr	r3, [pc, #72]	@ (8004d20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b0f      	ldr	r3, [pc, #60]	@ (8004d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f7fd fead 	bl	8002a42 <vListInsert>
}
 8004ce8:	e010      	b.n	8004d0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cea:	4b0e      	ldr	r3, [pc, #56]	@ (8004d24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b0a      	ldr	r3, [pc, #40]	@ (8004d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	f7fd fea3 	bl	8002a42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d202      	bcs.n	8004d0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d06:	4a08      	ldr	r2, [pc, #32]	@ (8004d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	6013      	str	r3, [r2, #0]
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000c2c 	.word	0x20000c2c
 8004d18:	20000754 	.word	0x20000754
 8004d1c:	20000c14 	.word	0x20000c14
 8004d20:	20000be4 	.word	0x20000be4
 8004d24:	20000be0 	.word	0x20000be0
 8004d28:	20000c48 	.word	0x20000c48

08004d2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	@ 0x28
 8004d30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d36:	f000 fbb1 	bl	800549c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004db0 <xTimerCreateTimerTask+0x84>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d021      	beq.n	8004d86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d4a:	1d3a      	adds	r2, r7, #4
 8004d4c:	f107 0108 	add.w	r1, r7, #8
 8004d50:	f107 030c 	add.w	r3, r7, #12
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fd fe09 	bl	800296c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	9202      	str	r2, [sp, #8]
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	2302      	movs	r3, #2
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	460a      	mov	r2, r1
 8004d6c:	4911      	ldr	r1, [pc, #68]	@ (8004db4 <xTimerCreateTimerTask+0x88>)
 8004d6e:	4812      	ldr	r0, [pc, #72]	@ (8004db8 <xTimerCreateTimerTask+0x8c>)
 8004d70:	f7fe ffae 	bl	8003cd0 <xTaskCreateStatic>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4a11      	ldr	r2, [pc, #68]	@ (8004dbc <xTimerCreateTimerTask+0x90>)
 8004d78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d7a:	4b10      	ldr	r3, [pc, #64]	@ (8004dbc <xTimerCreateTimerTask+0x90>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d82:	2301      	movs	r3, #1
 8004d84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	613b      	str	r3, [r7, #16]
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	e7fd      	b.n	8004da0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004da4:	697b      	ldr	r3, [r7, #20]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000c84 	.word	0x20000c84
 8004db4:	08005ed0 	.word	0x08005ed0
 8004db8:	08005035 	.word	0x08005035
 8004dbc:	20000c88 	.word	0x20000c88

08004dc0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004dce:	202c      	movs	r0, #44	@ 0x2c
 8004dd0:	f000 fe1c 	bl	8005a0c <pvPortMalloc>
 8004dd4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00d      	beq.n	8004df8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f845 	bl	8004e82 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004df8:	697b      	ldr	r3, [r7, #20]
	}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b08a      	sub	sp, #40	@ 0x28
 8004e06:	af02      	add	r7, sp, #8
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004e10:	232c      	movs	r3, #44	@ 0x2c
 8004e12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b2c      	cmp	r3, #44	@ 0x2c
 8004e18:	d00b      	beq.n	8004e32 <xTimerCreateStatic+0x30>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	61bb      	str	r3, [r7, #24]
}
 8004e2c:	bf00      	nop
 8004e2e:	bf00      	nop
 8004e30:	e7fd      	b.n	8004e2e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <xTimerCreateStatic+0x50>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	617b      	str	r3, [r7, #20]
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	e7fd      	b.n	8004e4e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8004e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e54:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f805 	bl	8004e82 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004e78:	69fb      	ldr	r3, [r7, #28]
	}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b086      	sub	sp, #24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	617b      	str	r3, [r7, #20]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01e      	beq.n	8004ef2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004eb4:	f000 faf2 	bl	800549c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fd fd83 	bl	80029e0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ee6:	f043 0304 	orr.w	r3, r3, #4
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004ef2:	bf00      	nop
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	@ 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10b      	bne.n	8004f2c <xTimerGenericCommand+0x30>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	623b      	str	r3, [r7, #32]
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	e7fd      	b.n	8004f28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f2c:	4b19      	ldr	r3, [pc, #100]	@ (8004f94 <xTimerGenericCommand+0x98>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d02a      	beq.n	8004f8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	dc18      	bgt.n	8004f78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f46:	f7ff fd0f 	bl	8004968 <xTaskGetSchedulerState>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d109      	bne.n	8004f64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f50:	4b10      	ldr	r3, [pc, #64]	@ (8004f94 <xTimerGenericCommand+0x98>)
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	f107 0110 	add.w	r1, r7, #16
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f5c:	f7fe f840 	bl	8002fe0 <xQueueGenericSend>
 8004f60:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f62:	e012      	b.n	8004f8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f64:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <xTimerGenericCommand+0x98>)
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	f107 0110 	add.w	r1, r7, #16
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f7fe f836 	bl	8002fe0 <xQueueGenericSend>
 8004f74:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f76:	e008      	b.n	8004f8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f78:	4b06      	ldr	r3, [pc, #24]	@ (8004f94 <xTimerGenericCommand+0x98>)
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	f107 0110 	add.w	r1, r7, #16
 8004f80:	2300      	movs	r3, #0
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	f7fe f92e 	bl	80031e4 <xQueueGenericSendFromISR>
 8004f88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3728      	adds	r7, #40	@ 0x28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000c84 	.word	0x20000c84

08004f98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fa2:	4b23      	ldr	r3, [pc, #140]	@ (8005030 <prvProcessExpiredTimer+0x98>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fd fd7f 	bl	8002ab4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d023      	beq.n	800500c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	18d1      	adds	r1, r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	6978      	ldr	r0, [r7, #20]
 8004fd2:	f000 f8d5 	bl	8005180 <prvInsertTimerInActiveList>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d020      	beq.n	800501e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fdc:	2300      	movs	r3, #0
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	6978      	ldr	r0, [r7, #20]
 8004fe8:	f7ff ff88 	bl	8004efc <xTimerGenericCommand>
 8004fec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d114      	bne.n	800501e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	60fb      	str	r3, [r7, #12]
}
 8005006:	bf00      	nop
 8005008:	bf00      	nop
 800500a:	e7fd      	b.n	8005008 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	b2da      	uxtb	r2, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	6978      	ldr	r0, [r7, #20]
 8005024:	4798      	blx	r3
}
 8005026:	bf00      	nop
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000c7c 	.word	0x20000c7c

08005034 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800503c:	f107 0308 	add.w	r3, r7, #8
 8005040:	4618      	mov	r0, r3
 8005042:	f000 f859 	bl	80050f8 <prvGetNextExpireTime>
 8005046:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4619      	mov	r1, r3
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f805 	bl	800505c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005052:	f000 f8d7 	bl	8005204 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005056:	bf00      	nop
 8005058:	e7f0      	b.n	800503c <prvTimerTask+0x8>
	...

0800505c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005066:	f7ff f877 	bl	8004158 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800506a:	f107 0308 	add.w	r3, r7, #8
 800506e:	4618      	mov	r0, r3
 8005070:	f000 f866 	bl	8005140 <prvSampleTimeNow>
 8005074:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d130      	bne.n	80050de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <prvProcessTimerOrBlockTask+0x3c>
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	429a      	cmp	r2, r3
 8005088:	d806      	bhi.n	8005098 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800508a:	f7ff f873 	bl	8004174 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff ff81 	bl	8004f98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005096:	e024      	b.n	80050e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800509e:	4b13      	ldr	r3, [pc, #76]	@ (80050ec <prvProcessTimerOrBlockTask+0x90>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <prvProcessTimerOrBlockTask+0x50>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <prvProcessTimerOrBlockTask+0x52>
 80050ac:	2300      	movs	r3, #0
 80050ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050b0:	4b0f      	ldr	r3, [pc, #60]	@ (80050f0 <prvProcessTimerOrBlockTask+0x94>)
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	4619      	mov	r1, r3
 80050be:	f7fe fdd3 	bl	8003c68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050c2:	f7ff f857 	bl	8004174 <xTaskResumeAll>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80050cc:	4b09      	ldr	r3, [pc, #36]	@ (80050f4 <prvProcessTimerOrBlockTask+0x98>)
 80050ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	f3bf 8f6f 	isb	sy
}
 80050dc:	e001      	b.n	80050e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050de:	f7ff f849 	bl	8004174 <xTaskResumeAll>
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000c80 	.word	0x20000c80
 80050f0:	20000c84 	.word	0x20000c84
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005100:	4b0e      	ldr	r3, [pc, #56]	@ (800513c <prvGetNextExpireTime+0x44>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <prvGetNextExpireTime+0x16>
 800510a:	2201      	movs	r2, #1
 800510c:	e000      	b.n	8005110 <prvGetNextExpireTime+0x18>
 800510e:	2200      	movs	r2, #0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d105      	bne.n	8005128 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800511c:	4b07      	ldr	r3, [pc, #28]	@ (800513c <prvGetNextExpireTime+0x44>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	e001      	b.n	800512c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800512c:	68fb      	ldr	r3, [r7, #12]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20000c7c 	.word	0x20000c7c

08005140 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005148:	f7ff f8b2 	bl	80042b0 <xTaskGetTickCount>
 800514c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800514e:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <prvSampleTimeNow+0x3c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	429a      	cmp	r2, r3
 8005156:	d205      	bcs.n	8005164 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005158:	f000 f93a 	bl	80053d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e002      	b.n	800516a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800516a:	4a04      	ldr	r2, [pc, #16]	@ (800517c <prvSampleTimeNow+0x3c>)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005170:	68fb      	ldr	r3, [r7, #12]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000c8c 	.word	0x20000c8c

08005180 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d812      	bhi.n	80051cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	1ad2      	subs	r2, r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d302      	bcc.n	80051ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051b4:	2301      	movs	r3, #1
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	e01b      	b.n	80051f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051ba:	4b10      	ldr	r3, [pc, #64]	@ (80051fc <prvInsertTimerInActiveList+0x7c>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f7fd fc3c 	bl	8002a42 <vListInsert>
 80051ca:	e012      	b.n	80051f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d206      	bcs.n	80051e2 <prvInsertTimerInActiveList+0x62>
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d302      	bcc.n	80051e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051dc:	2301      	movs	r3, #1
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	e007      	b.n	80051f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051e2:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <prvInsertTimerInActiveList+0x80>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3304      	adds	r3, #4
 80051ea:	4619      	mov	r1, r3
 80051ec:	4610      	mov	r0, r2
 80051ee:	f7fd fc28 	bl	8002a42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051f2:	697b      	ldr	r3, [r7, #20]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20000c80 	.word	0x20000c80
 8005200:	20000c7c 	.word	0x20000c7c

08005204 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08e      	sub	sp, #56	@ 0x38
 8005208:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800520a:	e0ce      	b.n	80053aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	da19      	bge.n	8005246 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005212:	1d3b      	adds	r3, r7, #4
 8005214:	3304      	adds	r3, #4
 8005216:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10b      	bne.n	8005236 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	61fb      	str	r3, [r7, #28]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800523c:	6850      	ldr	r0, [r2, #4]
 800523e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005240:	6892      	ldr	r2, [r2, #8]
 8005242:	4611      	mov	r1, r2
 8005244:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f2c0 80ae 	blt.w	80053aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800525a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525c:	3304      	adds	r3, #4
 800525e:	4618      	mov	r0, r3
 8005260:	f7fd fc28 	bl	8002ab4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005264:	463b      	mov	r3, r7
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff ff6a 	bl	8005140 <prvSampleTimeNow>
 800526c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b09      	cmp	r3, #9
 8005272:	f200 8097 	bhi.w	80053a4 <prvProcessReceivedCommands+0x1a0>
 8005276:	a201      	add	r2, pc, #4	@ (adr r2, 800527c <prvProcessReceivedCommands+0x78>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	080052a5 	.word	0x080052a5
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052a5 	.word	0x080052a5
 8005288:	0800531b 	.word	0x0800531b
 800528c:	0800532f 	.word	0x0800532f
 8005290:	0800537b 	.word	0x0800537b
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052a5 	.word	0x080052a5
 800529c:	0800531b 	.word	0x0800531b
 80052a0:	0800532f 	.word	0x0800532f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052aa:	f043 0301 	orr.w	r3, r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	18d1      	adds	r1, r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052c4:	f7ff ff5c 	bl	8005180 <prvInsertTimerInActiveList>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d06c      	beq.n	80053a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d061      	beq.n	80053a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	441a      	add	r2, r3
 80052ec:	2300      	movs	r3, #0
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	2300      	movs	r3, #0
 80052f2:	2100      	movs	r1, #0
 80052f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052f6:	f7ff fe01 	bl	8004efc <xTimerGenericCommand>
 80052fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d152      	bne.n	80053a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	61bb      	str	r3, [r7, #24]
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	e7fd      	b.n	8005316 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	b2da      	uxtb	r2, r3
 8005326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005328:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800532c:	e03d      	b.n	80053aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005334:	f043 0301 	orr.w	r3, r3, #1
 8005338:	b2da      	uxtb	r2, r3
 800533a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005344:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	617b      	str	r3, [r7, #20]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	18d1      	adds	r1, r2, r3
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005374:	f7ff ff04 	bl	8005180 <prvInsertTimerInActiveList>
					break;
 8005378:	e017      	b.n	80053aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800537a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d103      	bne.n	8005390 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005388:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800538a:	f000 fc0d 	bl	8005ba8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800538e:	e00c      	b.n	80053aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005396:	f023 0301 	bic.w	r3, r3, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80053a2:	e002      	b.n	80053aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80053a4:	bf00      	nop
 80053a6:	e000      	b.n	80053aa <prvProcessReceivedCommands+0x1a6>
					break;
 80053a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053aa:	4b08      	ldr	r3, [pc, #32]	@ (80053cc <prvProcessReceivedCommands+0x1c8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	1d39      	adds	r1, r7, #4
 80053b0:	2200      	movs	r2, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe f844 	bl	8003440 <xQueueReceive>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f47f af26 	bne.w	800520c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	3730      	adds	r7, #48	@ 0x30
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000c84 	.word	0x20000c84

080053d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053d6:	e049      	b.n	800546c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005494 <prvSwitchTimerLists+0xc4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005494 <prvSwitchTimerLists+0xc4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fd fb5f 	bl	8002ab4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d02f      	beq.n	800546c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4413      	add	r3, r2
 8005414:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	d90e      	bls.n	800543c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800542a:	4b1a      	ldr	r3, [pc, #104]	@ (8005494 <prvSwitchTimerLists+0xc4>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3304      	adds	r3, #4
 8005432:	4619      	mov	r1, r3
 8005434:	4610      	mov	r0, r2
 8005436:	f7fd fb04 	bl	8002a42 <vListInsert>
 800543a:	e017      	b.n	800546c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800543c:	2300      	movs	r3, #0
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2300      	movs	r3, #0
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	2100      	movs	r1, #0
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff fd58 	bl	8004efc <xTimerGenericCommand>
 800544c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10b      	bne.n	800546c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	603b      	str	r3, [r7, #0]
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	e7fd      	b.n	8005468 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800546c:	4b09      	ldr	r3, [pc, #36]	@ (8005494 <prvSwitchTimerLists+0xc4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1b0      	bne.n	80053d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005476:	4b07      	ldr	r3, [pc, #28]	@ (8005494 <prvSwitchTimerLists+0xc4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800547c:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <prvSwitchTimerLists+0xc8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a04      	ldr	r2, [pc, #16]	@ (8005494 <prvSwitchTimerLists+0xc4>)
 8005482:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005484:	4a04      	ldr	r2, [pc, #16]	@ (8005498 <prvSwitchTimerLists+0xc8>)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	6013      	str	r3, [r2, #0]
}
 800548a:	bf00      	nop
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000c7c 	.word	0x20000c7c
 8005498:	20000c80 	.word	0x20000c80

0800549c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054a2:	f000 f991 	bl	80057c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054a6:	4b15      	ldr	r3, [pc, #84]	@ (80054fc <prvCheckForValidListAndQueue+0x60>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d120      	bne.n	80054f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054ae:	4814      	ldr	r0, [pc, #80]	@ (8005500 <prvCheckForValidListAndQueue+0x64>)
 80054b0:	f7fd fa76 	bl	80029a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054b4:	4813      	ldr	r0, [pc, #76]	@ (8005504 <prvCheckForValidListAndQueue+0x68>)
 80054b6:	f7fd fa73 	bl	80029a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054ba:	4b13      	ldr	r3, [pc, #76]	@ (8005508 <prvCheckForValidListAndQueue+0x6c>)
 80054bc:	4a10      	ldr	r2, [pc, #64]	@ (8005500 <prvCheckForValidListAndQueue+0x64>)
 80054be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054c0:	4b12      	ldr	r3, [pc, #72]	@ (800550c <prvCheckForValidListAndQueue+0x70>)
 80054c2:	4a10      	ldr	r2, [pc, #64]	@ (8005504 <prvCheckForValidListAndQueue+0x68>)
 80054c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054c6:	2300      	movs	r3, #0
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	4b11      	ldr	r3, [pc, #68]	@ (8005510 <prvCheckForValidListAndQueue+0x74>)
 80054cc:	4a11      	ldr	r2, [pc, #68]	@ (8005514 <prvCheckForValidListAndQueue+0x78>)
 80054ce:	2110      	movs	r1, #16
 80054d0:	200a      	movs	r0, #10
 80054d2:	f7fd fb83 	bl	8002bdc <xQueueGenericCreateStatic>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4a08      	ldr	r2, [pc, #32]	@ (80054fc <prvCheckForValidListAndQueue+0x60>)
 80054da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80054dc:	4b07      	ldr	r3, [pc, #28]	@ (80054fc <prvCheckForValidListAndQueue+0x60>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054e4:	4b05      	ldr	r3, [pc, #20]	@ (80054fc <prvCheckForValidListAndQueue+0x60>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	490b      	ldr	r1, [pc, #44]	@ (8005518 <prvCheckForValidListAndQueue+0x7c>)
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fb68 	bl	8003bc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054f0:	f000 f99c 	bl	800582c <vPortExitCritical>
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000c84 	.word	0x20000c84
 8005500:	20000c54 	.word	0x20000c54
 8005504:	20000c68 	.word	0x20000c68
 8005508:	20000c7c 	.word	0x20000c7c
 800550c:	20000c80 	.word	0x20000c80
 8005510:	20000d30 	.word	0x20000d30
 8005514:	20000c90 	.word	0x20000c90
 8005518:	08005ed8 	.word	0x08005ed8

0800551c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10b      	bne.n	8005546 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	60fb      	str	r3, [r7, #12]
}
 8005540:	bf00      	nop
 8005542:	bf00      	nop
 8005544:	e7fd      	b.n	8005542 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8005546:	f000 f93f 	bl	80057c8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005550:	f000 f96c 	bl	800582c <vPortExitCritical>

	return pvReturn;
 8005554:	693b      	ldr	r3, [r7, #16]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3b04      	subs	r3, #4
 8005570:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b04      	subs	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f023 0201 	bic.w	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3b04      	subs	r3, #4
 800558e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005590:	4a0c      	ldr	r2, [pc, #48]	@ (80055c4 <pxPortInitialiseStack+0x64>)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3b14      	subs	r3, #20
 800559a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3b04      	subs	r3, #4
 80055a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f06f 0202 	mvn.w	r2, #2
 80055ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3b20      	subs	r3, #32
 80055b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055b6:	68fb      	ldr	r3, [r7, #12]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	080055c9 	.word	0x080055c9

080055c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055d2:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <prvTaskExitError+0x58>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d00b      	beq.n	80055f4 <prvTaskExitError+0x2c>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60fb      	str	r3, [r7, #12]
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	e7fd      	b.n	80055f0 <prvTaskExitError+0x28>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	60bb      	str	r3, [r7, #8]
}
 8005606:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005608:	bf00      	nop
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0fc      	beq.n	800560a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	2000000c 	.word	0x2000000c
	...

08005630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005630:	4b07      	ldr	r3, [pc, #28]	@ (8005650 <pxCurrentTCBConst2>)
 8005632:	6819      	ldr	r1, [r3, #0]
 8005634:	6808      	ldr	r0, [r1, #0]
 8005636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563a:	f380 8809 	msr	PSP, r0
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f380 8811 	msr	BASEPRI, r0
 800564a:	4770      	bx	lr
 800564c:	f3af 8000 	nop.w

08005650 <pxCurrentTCBConst2>:
 8005650:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop

08005658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005658:	4808      	ldr	r0, [pc, #32]	@ (800567c <prvPortStartFirstTask+0x24>)
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	6800      	ldr	r0, [r0, #0]
 800565e:	f380 8808 	msr	MSP, r0
 8005662:	f04f 0000 	mov.w	r0, #0
 8005666:	f380 8814 	msr	CONTROL, r0
 800566a:	b662      	cpsie	i
 800566c:	b661      	cpsie	f
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	df00      	svc	0
 8005678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800567a:	bf00      	nop
 800567c:	e000ed08 	.word	0xe000ed08

08005680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005686:	4b47      	ldr	r3, [pc, #284]	@ (80057a4 <xPortStartScheduler+0x124>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a47      	ldr	r2, [pc, #284]	@ (80057a8 <xPortStartScheduler+0x128>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d10b      	bne.n	80056a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60fb      	str	r3, [r7, #12]
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	e7fd      	b.n	80056a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056a8:	4b3e      	ldr	r3, [pc, #248]	@ (80057a4 <xPortStartScheduler+0x124>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a3f      	ldr	r2, [pc, #252]	@ (80057ac <xPortStartScheduler+0x12c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10b      	bne.n	80056ca <xPortStartScheduler+0x4a>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	613b      	str	r3, [r7, #16]
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	e7fd      	b.n	80056c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056ca:	4b39      	ldr	r3, [pc, #228]	@ (80057b0 <xPortStartScheduler+0x130>)
 80056cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	22ff      	movs	r2, #255	@ 0xff
 80056da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	4b31      	ldr	r3, [pc, #196]	@ (80057b4 <xPortStartScheduler+0x134>)
 80056f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056f2:	4b31      	ldr	r3, [pc, #196]	@ (80057b8 <xPortStartScheduler+0x138>)
 80056f4:	2207      	movs	r2, #7
 80056f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056f8:	e009      	b.n	800570e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80056fa:	4b2f      	ldr	r3, [pc, #188]	@ (80057b8 <xPortStartScheduler+0x138>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3b01      	subs	r3, #1
 8005700:	4a2d      	ldr	r2, [pc, #180]	@ (80057b8 <xPortStartScheduler+0x138>)
 8005702:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	b2db      	uxtb	r3, r3
 800570c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005716:	2b80      	cmp	r3, #128	@ 0x80
 8005718:	d0ef      	beq.n	80056fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800571a:	4b27      	ldr	r3, [pc, #156]	@ (80057b8 <xPortStartScheduler+0x138>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f1c3 0307 	rsb	r3, r3, #7
 8005722:	2b04      	cmp	r3, #4
 8005724:	d00b      	beq.n	800573e <xPortStartScheduler+0xbe>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	60bb      	str	r3, [r7, #8]
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	e7fd      	b.n	800573a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800573e:	4b1e      	ldr	r3, [pc, #120]	@ (80057b8 <xPortStartScheduler+0x138>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	4a1c      	ldr	r2, [pc, #112]	@ (80057b8 <xPortStartScheduler+0x138>)
 8005746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005748:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <xPortStartScheduler+0x138>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005750:	4a19      	ldr	r2, [pc, #100]	@ (80057b8 <xPortStartScheduler+0x138>)
 8005752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800575c:	4b17      	ldr	r3, [pc, #92]	@ (80057bc <xPortStartScheduler+0x13c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a16      	ldr	r2, [pc, #88]	@ (80057bc <xPortStartScheduler+0x13c>)
 8005762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005768:	4b14      	ldr	r3, [pc, #80]	@ (80057bc <xPortStartScheduler+0x13c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a13      	ldr	r2, [pc, #76]	@ (80057bc <xPortStartScheduler+0x13c>)
 800576e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005774:	f000 f8da 	bl	800592c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005778:	4b11      	ldr	r3, [pc, #68]	@ (80057c0 <xPortStartScheduler+0x140>)
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800577e:	f000 f8f9 	bl	8005974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005782:	4b10      	ldr	r3, [pc, #64]	@ (80057c4 <xPortStartScheduler+0x144>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a0f      	ldr	r2, [pc, #60]	@ (80057c4 <xPortStartScheduler+0x144>)
 8005788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800578c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800578e:	f7ff ff63 	bl	8005658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005792:	f7fe fe69 	bl	8004468 <vTaskSwitchContext>
	prvTaskExitError();
 8005796:	f7ff ff17 	bl	80055c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	e000ed00 	.word	0xe000ed00
 80057a8:	410fc271 	.word	0x410fc271
 80057ac:	410fc270 	.word	0x410fc270
 80057b0:	e000e400 	.word	0xe000e400
 80057b4:	20000d80 	.word	0x20000d80
 80057b8:	20000d84 	.word	0x20000d84
 80057bc:	e000ed20 	.word	0xe000ed20
 80057c0:	2000000c 	.word	0x2000000c
 80057c4:	e000ef34 	.word	0xe000ef34

080057c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	607b      	str	r3, [r7, #4]
}
 80057e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057e2:	4b10      	ldr	r3, [pc, #64]	@ (8005824 <vPortEnterCritical+0x5c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3301      	adds	r3, #1
 80057e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005824 <vPortEnterCritical+0x5c>)
 80057ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005824 <vPortEnterCritical+0x5c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d110      	bne.n	8005816 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005828 <vPortEnterCritical+0x60>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <vPortEnterCritical+0x4e>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	603b      	str	r3, [r7, #0]
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <vPortEnterCritical+0x4a>
	}
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	2000000c 	.word	0x2000000c
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005832:	4b12      	ldr	r3, [pc, #72]	@ (800587c <vPortExitCritical+0x50>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <vPortExitCritical+0x26>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	607b      	str	r3, [r7, #4]
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	e7fd      	b.n	800584e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005852:	4b0a      	ldr	r3, [pc, #40]	@ (800587c <vPortExitCritical+0x50>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3b01      	subs	r3, #1
 8005858:	4a08      	ldr	r2, [pc, #32]	@ (800587c <vPortExitCritical+0x50>)
 800585a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800585c:	4b07      	ldr	r3, [pc, #28]	@ (800587c <vPortExitCritical+0x50>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d105      	bne.n	8005870 <vPortExitCritical+0x44>
 8005864:	2300      	movs	r3, #0
 8005866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f383 8811 	msr	BASEPRI, r3
}
 800586e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	2000000c 	.word	0x2000000c

08005880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005880:	f3ef 8009 	mrs	r0, PSP
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	4b15      	ldr	r3, [pc, #84]	@ (80058e0 <pxCurrentTCBConst>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	f01e 0f10 	tst.w	lr, #16
 8005890:	bf08      	it	eq
 8005892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	6010      	str	r0, [r2, #0]
 800589c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80058a4:	f380 8811 	msr	BASEPRI, r0
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f7fe fdda 	bl	8004468 <vTaskSwitchContext>
 80058b4:	f04f 0000 	mov.w	r0, #0
 80058b8:	f380 8811 	msr	BASEPRI, r0
 80058bc:	bc09      	pop	{r0, r3}
 80058be:	6819      	ldr	r1, [r3, #0]
 80058c0:	6808      	ldr	r0, [r1, #0]
 80058c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c6:	f01e 0f10 	tst.w	lr, #16
 80058ca:	bf08      	it	eq
 80058cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058d0:	f380 8809 	msr	PSP, r0
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	f3af 8000 	nop.w

080058e0 <pxCurrentTCBConst>:
 80058e0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop

080058e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	607b      	str	r3, [r7, #4]
}
 8005900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005902:	f7fe fcf7 	bl	80042f4 <xTaskIncrementTick>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800590c:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <xPortSysTickHandler+0x40>)
 800590e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	2300      	movs	r3, #0
 8005916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	f383 8811 	msr	BASEPRI, r3
}
 800591e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005930:	4b0b      	ldr	r3, [pc, #44]	@ (8005960 <vPortSetupTimerInterrupt+0x34>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005936:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <vPortSetupTimerInterrupt+0x38>)
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800593c:	4b0a      	ldr	r3, [pc, #40]	@ (8005968 <vPortSetupTimerInterrupt+0x3c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a0a      	ldr	r2, [pc, #40]	@ (800596c <vPortSetupTimerInterrupt+0x40>)
 8005942:	fba2 2303 	umull	r2, r3, r2, r3
 8005946:	099b      	lsrs	r3, r3, #6
 8005948:	4a09      	ldr	r2, [pc, #36]	@ (8005970 <vPortSetupTimerInterrupt+0x44>)
 800594a:	3b01      	subs	r3, #1
 800594c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800594e:	4b04      	ldr	r3, [pc, #16]	@ (8005960 <vPortSetupTimerInterrupt+0x34>)
 8005950:	2207      	movs	r2, #7
 8005952:	601a      	str	r2, [r3, #0]
}
 8005954:	bf00      	nop
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	e000e010 	.word	0xe000e010
 8005964:	e000e018 	.word	0xe000e018
 8005968:	20000000 	.word	0x20000000
 800596c:	10624dd3 	.word	0x10624dd3
 8005970:	e000e014 	.word	0xe000e014

08005974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005984 <vPortEnableVFP+0x10>
 8005978:	6801      	ldr	r1, [r0, #0]
 800597a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800597e:	6001      	str	r1, [r0, #0]
 8005980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005982:	bf00      	nop
 8005984:	e000ed88 	.word	0xe000ed88

08005988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800598e:	f3ef 8305 	mrs	r3, IPSR
 8005992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b0f      	cmp	r3, #15
 8005998:	d915      	bls.n	80059c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800599a:	4a18      	ldr	r2, [pc, #96]	@ (80059fc <vPortValidateInterruptPriority+0x74>)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059a4:	4b16      	ldr	r3, [pc, #88]	@ (8005a00 <vPortValidateInterruptPriority+0x78>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	7afa      	ldrb	r2, [r7, #11]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d20b      	bcs.n	80059c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	607b      	str	r3, [r7, #4]
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	e7fd      	b.n	80059c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a04 <vPortValidateInterruptPriority+0x7c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005a08 <vPortValidateInterruptPriority+0x80>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d90b      	bls.n	80059ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	603b      	str	r3, [r7, #0]
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop
 80059ec:	e7fd      	b.n	80059ea <vPortValidateInterruptPriority+0x62>
	}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	e000e3f0 	.word	0xe000e3f0
 8005a00:	20000d80 	.word	0x20000d80
 8005a04:	e000ed0c 	.word	0xe000ed0c
 8005a08:	20000d84 	.word	0x20000d84

08005a0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08a      	sub	sp, #40	@ 0x28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a18:	f7fe fb9e 	bl	8004158 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a1c:	4b5c      	ldr	r3, [pc, #368]	@ (8005b90 <pvPortMalloc+0x184>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a24:	f000 f924 	bl	8005c70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a28:	4b5a      	ldr	r3, [pc, #360]	@ (8005b94 <pvPortMalloc+0x188>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f040 8095 	bne.w	8005b60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01e      	beq.n	8005a7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4413      	add	r3, r2
 8005a42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d015      	beq.n	8005a7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	3308      	adds	r3, #8
 8005a56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <pvPortMalloc+0x6e>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	617b      	str	r3, [r7, #20]
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	e7fd      	b.n	8005a76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d06f      	beq.n	8005b60 <pvPortMalloc+0x154>
 8005a80:	4b45      	ldr	r3, [pc, #276]	@ (8005b98 <pvPortMalloc+0x18c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d86a      	bhi.n	8005b60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a8a:	4b44      	ldr	r3, [pc, #272]	@ (8005b9c <pvPortMalloc+0x190>)
 8005a8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a8e:	4b43      	ldr	r3, [pc, #268]	@ (8005b9c <pvPortMalloc+0x190>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a94:	e004      	b.n	8005aa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d903      	bls.n	8005ab2 <pvPortMalloc+0xa6>
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f1      	bne.n	8005a96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ab2:	4b37      	ldr	r3, [pc, #220]	@ (8005b90 <pvPortMalloc+0x184>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d051      	beq.n	8005b60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	4413      	add	r3, r2
 8005ac4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	1ad2      	subs	r2, r2, r3
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d920      	bls.n	8005b20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00b      	beq.n	8005b08 <pvPortMalloc+0xfc>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	613b      	str	r3, [r7, #16]
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b1a:	69b8      	ldr	r0, [r7, #24]
 8005b1c:	f000 f90a 	bl	8005d34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b20:	4b1d      	ldr	r3, [pc, #116]	@ (8005b98 <pvPortMalloc+0x18c>)
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b98 <pvPortMalloc+0x18c>)
 8005b2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b98 <pvPortMalloc+0x18c>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba0 <pvPortMalloc+0x194>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d203      	bcs.n	8005b42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b3a:	4b17      	ldr	r3, [pc, #92]	@ (8005b98 <pvPortMalloc+0x18c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a18      	ldr	r2, [pc, #96]	@ (8005ba0 <pvPortMalloc+0x194>)
 8005b40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	4b13      	ldr	r3, [pc, #76]	@ (8005b94 <pvPortMalloc+0x188>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b56:	4b13      	ldr	r3, [pc, #76]	@ (8005ba4 <pvPortMalloc+0x198>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	4a11      	ldr	r2, [pc, #68]	@ (8005ba4 <pvPortMalloc+0x198>)
 8005b5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b60:	f7fe fb08 	bl	8004174 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00b      	beq.n	8005b86 <pvPortMalloc+0x17a>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	60fb      	str	r3, [r7, #12]
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	e7fd      	b.n	8005b82 <pvPortMalloc+0x176>
	return pvReturn;
 8005b86:	69fb      	ldr	r3, [r7, #28]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3728      	adds	r7, #40	@ 0x28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20001948 	.word	0x20001948
 8005b94:	2000195c 	.word	0x2000195c
 8005b98:	2000194c 	.word	0x2000194c
 8005b9c:	20001940 	.word	0x20001940
 8005ba0:	20001950 	.word	0x20001950
 8005ba4:	20001954 	.word	0x20001954

08005ba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d04f      	beq.n	8005c5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bba:	2308      	movs	r3, #8
 8005bbc:	425b      	negs	r3, r3
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	4b25      	ldr	r3, [pc, #148]	@ (8005c64 <vPortFree+0xbc>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10b      	bne.n	8005bee <vPortFree+0x46>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	60fb      	str	r3, [r7, #12]
}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop
 8005bec:	e7fd      	b.n	8005bea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <vPortFree+0x66>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	60bb      	str	r3, [r7, #8]
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	e7fd      	b.n	8005c0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	4b14      	ldr	r3, [pc, #80]	@ (8005c64 <vPortFree+0xbc>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4013      	ands	r3, r2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01e      	beq.n	8005c5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11a      	bne.n	8005c5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	4b0e      	ldr	r3, [pc, #56]	@ (8005c64 <vPortFree+0xbc>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	401a      	ands	r2, r3
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c34:	f7fe fa90 	bl	8004158 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c68 <vPortFree+0xc0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4413      	add	r3, r2
 8005c42:	4a09      	ldr	r2, [pc, #36]	@ (8005c68 <vPortFree+0xc0>)
 8005c44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c46:	6938      	ldr	r0, [r7, #16]
 8005c48:	f000 f874 	bl	8005d34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c4c:	4b07      	ldr	r3, [pc, #28]	@ (8005c6c <vPortFree+0xc4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3301      	adds	r3, #1
 8005c52:	4a06      	ldr	r2, [pc, #24]	@ (8005c6c <vPortFree+0xc4>)
 8005c54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c56:	f7fe fa8d 	bl	8004174 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c5a:	bf00      	nop
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	2000195c 	.word	0x2000195c
 8005c68:	2000194c 	.word	0x2000194c
 8005c6c:	20001958 	.word	0x20001958

08005c70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c76:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005c7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c7c:	4b27      	ldr	r3, [pc, #156]	@ (8005d1c <prvHeapInit+0xac>)
 8005c7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00c      	beq.n	8005ca4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3307      	adds	r3, #7
 8005c8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0307 	bic.w	r3, r3, #7
 8005c96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8005d1c <prvHeapInit+0xac>)
 8005ca0:	4413      	add	r3, r2
 8005ca2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d20 <prvHeapInit+0xb0>)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cae:	4b1c      	ldr	r3, [pc, #112]	@ (8005d20 <prvHeapInit+0xb0>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	4413      	add	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0307 	bic.w	r3, r3, #7
 8005cca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4a15      	ldr	r2, [pc, #84]	@ (8005d24 <prvHeapInit+0xb4>)
 8005cd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cd2:	4b14      	ldr	r3, [pc, #80]	@ (8005d24 <prvHeapInit+0xb4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cda:	4b12      	ldr	r3, [pc, #72]	@ (8005d24 <prvHeapInit+0xb4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	1ad2      	subs	r2, r2, r3
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d24 <prvHeapInit+0xb4>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8005d28 <prvHeapInit+0xb8>)
 8005cfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4a09      	ldr	r2, [pc, #36]	@ (8005d2c <prvHeapInit+0xbc>)
 8005d06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d08:	4b09      	ldr	r3, [pc, #36]	@ (8005d30 <prvHeapInit+0xc0>)
 8005d0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d0e:	601a      	str	r2, [r3, #0]
}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20000d88 	.word	0x20000d88
 8005d20:	20001940 	.word	0x20001940
 8005d24:	20001948 	.word	0x20001948
 8005d28:	20001950 	.word	0x20001950
 8005d2c:	2000194c 	.word	0x2000194c
 8005d30:	2000195c 	.word	0x2000195c

08005d34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d3c:	4b28      	ldr	r3, [pc, #160]	@ (8005de0 <prvInsertBlockIntoFreeList+0xac>)
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e002      	b.n	8005d48 <prvInsertBlockIntoFreeList+0x14>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d8f7      	bhi.n	8005d42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d108      	bne.n	8005d76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	441a      	add	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	441a      	add	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d118      	bne.n	8005dbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4b15      	ldr	r3, [pc, #84]	@ (8005de4 <prvInsertBlockIntoFreeList+0xb0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d00d      	beq.n	8005db2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	441a      	add	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	e008      	b.n	8005dc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005db2:	4b0c      	ldr	r3, [pc, #48]	@ (8005de4 <prvInsertBlockIntoFreeList+0xb0>)
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e003      	b.n	8005dc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d002      	beq.n	8005dd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20001940 	.word	0x20001940
 8005de4:	20001948 	.word	0x20001948

08005de8 <memset>:
 8005de8:	4402      	add	r2, r0
 8005dea:	4603      	mov	r3, r0
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d100      	bne.n	8005df2 <memset+0xa>
 8005df0:	4770      	bx	lr
 8005df2:	f803 1b01 	strb.w	r1, [r3], #1
 8005df6:	e7f9      	b.n	8005dec <memset+0x4>

08005df8 <__libc_init_array>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8005e30 <__libc_init_array+0x38>)
 8005dfc:	4c0d      	ldr	r4, [pc, #52]	@ (8005e34 <__libc_init_array+0x3c>)
 8005dfe:	1b64      	subs	r4, r4, r5
 8005e00:	10a4      	asrs	r4, r4, #2
 8005e02:	2600      	movs	r6, #0
 8005e04:	42a6      	cmp	r6, r4
 8005e06:	d109      	bne.n	8005e1c <__libc_init_array+0x24>
 8005e08:	4d0b      	ldr	r5, [pc, #44]	@ (8005e38 <__libc_init_array+0x40>)
 8005e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8005e3c <__libc_init_array+0x44>)
 8005e0c:	f000 f826 	bl	8005e5c <_init>
 8005e10:	1b64      	subs	r4, r4, r5
 8005e12:	10a4      	asrs	r4, r4, #2
 8005e14:	2600      	movs	r6, #0
 8005e16:	42a6      	cmp	r6, r4
 8005e18:	d105      	bne.n	8005e26 <__libc_init_array+0x2e>
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e20:	4798      	blx	r3
 8005e22:	3601      	adds	r6, #1
 8005e24:	e7ee      	b.n	8005e04 <__libc_init_array+0xc>
 8005e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2a:	4798      	blx	r3
 8005e2c:	3601      	adds	r6, #1
 8005e2e:	e7f2      	b.n	8005e16 <__libc_init_array+0x1e>
 8005e30:	08005fc0 	.word	0x08005fc0
 8005e34:	08005fc0 	.word	0x08005fc0
 8005e38:	08005fc0 	.word	0x08005fc0
 8005e3c:	08005fc4 	.word	0x08005fc4

08005e40 <memcpy>:
 8005e40:	440a      	add	r2, r1
 8005e42:	4291      	cmp	r1, r2
 8005e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e48:	d100      	bne.n	8005e4c <memcpy+0xc>
 8005e4a:	4770      	bx	lr
 8005e4c:	b510      	push	{r4, lr}
 8005e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e56:	4291      	cmp	r1, r2
 8005e58:	d1f9      	bne.n	8005e4e <memcpy+0xe>
 8005e5a:	bd10      	pop	{r4, pc}

08005e5c <_init>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	bf00      	nop
 8005e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e62:	bc08      	pop	{r3}
 8005e64:	469e      	mov	lr, r3
 8005e66:	4770      	bx	lr

08005e68 <_fini>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	bf00      	nop
 8005e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6e:	bc08      	pop	{r3}
 8005e70:	469e      	mov	lr, r3
 8005e72:	4770      	bx	lr
